@inherits LayoutComponentBase

<MudThemeProvider Theme="darkTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudAppBarSpacer />
        <MudButton Link="/limitData">test</MudButton>
        <MudItem xs="12" sm="6" md="4">
            <EditForm Model="@model" OnValidSubmit="Search">
                <MudTextField Spellcheck="false" Class="searchField" @bind-Value="@model.SearchValue" Label="Search Guilds" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" DisableUnderLine="true"></MudTextField>
            </EditForm>
        </MudItem>
        <MudAppBarSpacer />
        @if (isLoggedIn)
        {

            if (!hasProfile)
            {
                <MudButton Link="/setupProfile" Variant="Variant.Outlined" Color="Color.Warning">Get started!</MudButton>
            }
            <MudText><span style="color: #FF8000">@BattleTagName</span>@BattleTagId</MudText>
            <MudMenu Class="ml-5 p-5" Direction="Direction.Right" OffsetY="true">
                <ActivatorContent>
                    <MudAvatar Image="@ProfilePic" Color="Color.Transparent">

                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    @if (hasProfile)
                    {
                        <MudMenuItem>
                            <MudButton OnClick="OpenProfilePage" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AccountCircle">Profile</MudButton>
                        </MudMenuItem>
                    }
                    <form style="width: 250px" method="post" action="Identity/Account/LogOut">
                        <button type="submit">
                            <MudMenuItem>
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Logout">Logout</MudButton>
                            </MudMenuItem>
                        </button>
                    </form>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <MudButton Class="mr-5" StartIcon="@Icons.Material.Filled.Login" Link="/Identity/Account/Login" Color="Color.Primary">Login</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.PersonAdd" Link="/Identity/Account/Register" Color="Color.Success">Register</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudNavMenu Class="mud-width-full">
            <MudText Typo="Typo.h6" Class="px-4 mt-1" Style="color: #FF8000; user-select: none">wowindex.io</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Warcraft rankings</MudText>
            <MudDivider Class="my-2" />
            @*<MudText Typo="Typo.subtitle2" Color="Color.Inherit" Class="ml-4 my-3">Leaderboards</MudText>*@
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Outlined.Home">Home</MudNavLink>
            <MudNavLink Href="/about" Icon="@Icons.Outlined.Info">About</MudNavLink>
            <MudNavLink Href="/contact" Icon="@Icons.Outlined.AlternateEmail">Contact</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {

    Models.Index.MainLayoutModel model = new Models.Index.MainLayoutModel();

    [Parameter]
    public string region { get; set; }

    public string ProfilePic { get; set; } = "img/profile-icon.svg";
    public string BattleTagName = "";
    public string BattleTagId = "";

    bool hasProfile = true;
    bool isLoggedIn = true;
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;

    }

    private void Search(EditContext context)
    {
        var searchQuery = model.SearchValue;

        var guild = _context.Records.Where(x => x.name == searchQuery && x.raidName == "castle-nathria").FirstOrDefault();

        if (guild != null)
        {
            // We found the guild in our database!
            // check the age of this guild record
            // send the user to this guilds page (update can be handled there)
            string region = guild.region;
            string realm = guild.realm;
            string guildNameSlug = guild.name.Replace(" ", "-").ToLower();

            // naviagte to guilds page
            //NavigationManager.NavigateTo($"/guild/{region}/{realm}/{guildNameSlug}/");
            Snackbar.Add("Got it!", Severity.Success);
        }
        else
        {
            // we did not find the guild in our database
            // check wow api to see if guild exists and either add it to our database and redirect the user to its page or return guild not found
            Snackbar.Add("Guild not found in database!", Severity.Error);
        }
    }


    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#FF8000",
            Black = "#27272f",
            Background = "#141414",
            BackgroundGrey = "#27272f",
            Surface = "#1F1F1F",
            DrawerBackground = "#000000",
            DrawerText = "#b3b3b3",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#232940",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "#FFFFFF",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)"
        }
    };

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;

        if (!user.Identity.IsAuthenticated)
        {
            isLoggedIn = false;
        }

        var character = _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefault();
        var profile = await _context.Profiles.Where(x => user.Identity.Name.Equals(x.AspEmail)).FirstOrDefaultAsync();
        if (character == null)
        {
            hasProfile = false;
        }
        else
        {
            region = character.Region;
            ProfilePic = character.avatar_url;
            BattleTagName = profile.BattleTag.Split('#')[0];
            BattleTagId = "#" + profile.BattleTag.Split('#')[1];
        }

        var storedToken = await _context.Tokens.FirstOrDefaultAsync();
        if (storedToken == null || storedToken.ExpirationDate < DateTime.Now)
        {
            var rows = from x in _context.Tokens select x;
            _context.RemoveRange(rows);
            _context.SaveChanges();

            string clientId = Configuration["APIClientID"];
            string clientSecret = Configuration["APIClientSecret"];

            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri($"https://eu.battle.net/oauth/token");

            // query parameters
            string grantType = "client_credentials";

            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{clientId}:{clientSecret}")));

            // Send request
            var request = await client.PostAsync($"?grant_type={grantType}&scope=wow.profile", null);

            string response = await request.Content.ReadAsStringAsync();

            // oauth access token, 24 hour TTL
            string AccessToken = response.Split('"')[3];

            Data.Token newToken = new Data.Token()
            {
                token = AccessToken,
                ExpirationDate = DateTime.Now.AddSeconds(86399),
            };

            _context.Tokens.Add(newToken);
            await _context.SaveChangesAsync();
        }
    }

    private async Task OpenProfilePage()
    {
        var user = (await AuthStat).User;
        var character = await _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefaultAsync();

        if (character.ExpirationDate < DateTime.Now.AddSeconds(-3))
            NavigationManager.NavigateTo($"/refreshProfile/{region}");
        else
        {
            NavigationManager.NavigateTo("/profile");
        }
    }

}
