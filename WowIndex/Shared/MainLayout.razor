@inherits LayoutComponentBase

<MudThemeProvider Theme="darkTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())" />
            <MudAppBarSpacer />
                @if (!isEditMode)
                {
                <MudItem Style="max-width: 400px" xs="6">
                    <MudAutocomplete CoerceText="true" Text="" Spellcheck="false" ResetValueOnEmptyText="false" T="Models.GuildObjects.Guild" ValueChanged="Search" DisableUnderLine="true" Variant="Variant.Filled" Required="true" Class="searchField" Placeholder="Guild search" SearchFunc="@GuildSearch">
                        <ItemTemplate Context="result">
                            @if (result.Region.Equals("No records found"))
                            {
                                <MudButton Class="mx-n5 mt-n3 mb-n3 py-5" Style="width: calc(100% + 40px);" FullWidth="true" OnClick="@(e => ToggleAddBox(false))" StartIcon="@Icons.Material.Filled.Add">
                                    @result.Region.ToUpper()
                                </MudButton>
                                <MudText Typo="Typo.body2">
                                    @result.Name @result.Realm
                                </MudText>
                            }
                            else
                            {
                                <MudText>
                                    @result.Region.ToUpper()
                                </MudText>
                                <MudText Typo="Typo.body2">
                                    @result.Name @result.Realm
                                </MudText>
                            }
                        </ItemTemplate>
                    </MudAutocomplete>
                </MudItem>

                }
                else
                {
                <MudItem Style="max-width: 700px" xs="12">
                    <EditForm Model="@model" OnValidSubmit="AddGuild">
                        <MudGrid>
                            <MudItem xs="1">
                                <MudIconButton OnClick="@(e => ToggleAddBox(true))" Icon="@Icons.Material.Filled.Search" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect DisableUnderLine="true" @bind-Value="@model.searchRegion" Class="searchSelect" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@("eu")">EU</MudSelectItem>
                                    <MudSelectItem Value="@("us")">US</MudSelectItem>
                                    <MudSelectItem Value="@("kr")">KR</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Immediate="true" Spellcheck="false" Class="searchField" @bind-Value="@model.searchGuild" Placeholder="Guild name" Variant="Variant.Filled" Margin="Margin.Dense" DisableUnderLine="true" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudTextField Immediate="true" Spellcheck="false" Class="searchField" @bind-Value="@model.searchRealm" Placeholder="Realm" Variant="Variant.Filled" Margin="Margin.Dense" DisableUnderLine="true" />
                            </MudItem>
                            <MudItem xs="2">
                                @{ bool check = model.searchGuild == "" || model.searchGuild == null || model.searchRealm == "" || model.searchRealm == null;}
                                <MudButton Disabled="check" Class="mt-1" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudItem>
                }
            <MudAppBarSpacer />
                @if (isLoggedIn)
                {
                    if (!hasProfile)
                    {
                        <MudButton Link="/setupProfile" Variant="Variant.Outlined" Color="Color.Warning">Get started!</MudButton>
                    }
                    <MudText><span style="color: #FF8000">@BattleTagName</span>@BattleTagId</MudText>
                    <MudMenu Class="ml-5 p-5" Direction="Direction.Right" OffsetY="true">
                        <ActivatorContent>
                            <MudAvatar Image="@ProfilePic" Color="Color.Transparent">

                            </MudAvatar>
                        </ActivatorContent>
                        <ChildContent>
                            @if (hasProfile)
                            {
                                <MudMenuItem>
                                    <MudButton OnClick="OpenProfilePage" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AccountCircle">Profile</MudButton>
                                </MudMenuItem>
                            }
                            <form style="width: 250px" method="post" action="Identity/Account/LogOut">
                                <button type="submit">
                                    <MudMenuItem>
                                        <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Logout">Logout</MudButton>
                                    </MudMenuItem>
                                </button>
                            </form>
                        </ChildContent>
                    </MudMenu>
                }
                else
                {
                    <MudButton Variant="Variant.Text" Class="mr-5" StartIcon="@Icons.Material.Filled.Login" Link="/Identity/Account/Login" Color="Color.Secondary">Login</MudButton>
                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.PersonAdd" Link="/Identity/Account/Register" Color="Color.Secondary">Register</MudButton>
                }
        </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudNavMenu Class="mud-width-full">
            <MudText Typo="Typo.h6" Class="px-4 mt-1" Style="color: #FF8000; user-select: none">wowindex.io</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Warcraft rankings</MudText>
            <MudDivider Class="my-2" />
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Filled.Stream">Live Raid Progression</MudNavLink>
            <MudNavLink Href="/HoF" Icon="@Icons.Outlined.EmojiEvents">Hall of fame</MudNavLink>
            <MudDivider DividerType="DividerType.Middle" />
            <MudNavLink Href="/about" Icon="@Icons.Outlined.Info">About</MudNavLink>
            <MudNavLink Href="/FAQ" Icon="@Icons.Outlined.QuestionAnswer">FAQ</MudNavLink>
            <MudNavLink Href="/bugReport" Icon="@Icons.Outlined.BugReport">Report bug</MudNavLink>
            <MudNavLink Href="/contact" Icon="@Icons.Outlined.AlternateEmail">Contact</MudNavLink>
            <AuthorizeView Roles="Admin">
                <MudNavLink Icon="@Icons.Material.Filled.AdminPanelSettings" Href="/admin">Admin</MudNavLink>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    Models.Index.MainLayoutModel model = new Models.Index.MainLayoutModel();
    List<Models.GuildObjects.Guild> guilds = new List<Models.GuildObjects.Guild>();

    public string ProfilePic { get; set; } = "img/profile-icon.svg";
    public string BattleTagName = "";
    public string BattleTagId = "";
    public string region = "";
    public string searchValue { get; set; }

    bool hasProfile = true;
    bool isLoggedIn = true;
    bool _drawerOpen = true;
    bool isEditMode = false;

    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#FF8000",
            Secondary = "#A970FF",
            LinesInputs = "#27272f",
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            TableLines = "#27272f",
            Divider = "#32333d",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
        }
    };

    protected async override Task OnInitializedAsync()
    {
        guilds = _context.Guilds.ToList();

        base.OnInitialized();
        var user = (await AuthStat).User;

        if (!user.Identity.IsAuthenticated)
            isLoggedIn = false;

        var character = await _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefaultAsync();
        var profile = await _context.Profiles.Where(x => user.Identity.Name.Equals(x.AspEmail)).FirstOrDefaultAsync();
        if (character == null)
            hasProfile = false;
        else
        {
            region = character.Region;
            ProfilePic = character.avatar_url;
            BattleTagName = profile.BattleTag.Split('#')[0];
            BattleTagId = "#" + profile.BattleTag.Split('#')[1];
        }
    }

    private async Task AddGuild(EditContext context)
    {
        string searchRegion = model.searchRegion;
        string searchNameSlug = model.searchGuild.Replace(" ", "-").ToLower();
        string searchRealmSlug = model.searchRealm.Replace(" ", "-").ToLower();

        var guild = await _context.Guilds.Where(x => x.Region == searchRegion && x.NameSlug == searchNameSlug && x.RealmSlug == searchRealmSlug).FirstOrDefaultAsync();

        if (guild != null)
            Search(guild);
        else
        {
            HttpClient client = new HttpClient();
            client.BaseAddress = new Uri($"https://{searchRegion}.api.blizzard.com/");

            // check api for guild
            var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
            var request = await client.GetAsync($"data/wow/guild/{searchRealmSlug}/{searchNameSlug}?namespace=profile-{searchRegion}&locale=en_US&access_token={accessToken.token}");

            if (request.IsSuccessStatusCode)
            {
                // build guild poco
                string result = request.Content.ReadAsStringAsync().Result;
                var guildObject = JsonConvert.DeserializeObject<WowIndex.Models.POCO.GuildPOCO.Guild>(result);

                var newGuild = new Models.GuildObjects.Guild()
                {
                    GuildId = guildObject.id,
                    RecordCreationDate = DateTime.Now,
                    Name = guildObject.name,
                    NameSlug = searchNameSlug,
                    Region = searchRegion,
                    Realm = guildObject.realm.name,
                    RealmSlug = searchRealmSlug,
                    RealmId = guildObject.realm.id,
                    FactionType = guildObject.faction.type,
                    FactionName = guildObject.faction.name,
                };

                // Add new guild to the db
                _context.Guilds.Add(newGuild);
                await _context.SaveChangesAsync();

                // redirect user to guild page
                NavigationManager.NavigateTo($"/guild/{newGuild.Region.ToLower()}/{newGuild.RealmSlug}/{newGuild.NameSlug}/");
            }
            else
                Snackbar.Add("Guild not found, Please check region & spelling.", Severity.Normal);
        }
    }

    private async Task<IEnumerable<Models.GuildObjects.Guild>> GuildSearch(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<Models.GuildObjects.Guild>();

        var result = guilds.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Take(100).ToList();
        if (result.Count > 0)
            return result;
        else
        {
            result.Add(new Models.GuildObjects.Guild { Region = "No records found", Realm = "", Name = "" });
            return result;
        }
    }

    private async Task OpenProfilePage()
    {
        var user = (await AuthStat).User;
        var character = await _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefaultAsync();

        if (character.ExpirationDate < DateTime.Now.AddSeconds(-3))
            NavigationManager.NavigateTo($"/refreshProfile/{region}");
        else
        {
            NavigationManager.NavigateTo("/profile");
        }
    }

    private void Search(Models.GuildObjects.Guild g)
    {
        // naviagte to guilds page
        NavigationManager.NavigateTo($"/guild/{g.Region}/{g.RealmSlug}/{g.NameSlug}/");
    }

    private async void ToggleAddBox(bool b)
    {
        isEditMode = !b;
        StateHasChanged();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}
