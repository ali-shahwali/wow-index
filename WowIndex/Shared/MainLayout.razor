@inherits LayoutComponentBase

<MudThemeProvider Theme="darkTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudAppBarSpacer />
        <MudButton Link="/limitData">Web Scrape Demo</MudButton>
        <MudItem xs="12" sm="6" md="4">
            <EditForm Model="@model" OnValidSubmit="Search">
                <MudGrid>
                    <MudItem xs="2">
                        <MudSelect DisableUnderLine="true" @bind-Value="@model.searchRegion" Class="searchSelect" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("eu")">EU</MudSelectItem>
                            <MudSelectItem Value="@("us")">US</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Spellcheck="false" Class="searchField" @bind-Value="@model.SearchGuild" Label="Guild name" Variant="Variant.Filled" Margin="Margin.Dense" DisableUnderLine="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Spellcheck="false" Class="searchField" @bind-Value="@model.SearchGuildRealm" Label="Realm" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Primary" DisableUnderLine="true"></MudTextField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Search</MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
        <MudAppBarSpacer />
        @if (isLoggedIn)
        {

            if (!hasProfile)
            {
                <MudButton Link="/setupProfile" Variant="Variant.Outlined" Color="Color.Warning">Get started!</MudButton>
            }
            <MudText><span style="color: #FF8000">@BattleTagName</span>@BattleTagId</MudText>
            <MudMenu Class="ml-5 p-5" Direction="Direction.Right" OffsetY="true">
                <ActivatorContent>
                    <MudAvatar Image="@ProfilePic" Color="Color.Transparent">

                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    @if (hasProfile)
                    {
                        <MudMenuItem>
                            <MudButton OnClick="OpenProfilePage" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.AccountCircle">Profile</MudButton>
                        </MudMenuItem>
                    }
                    <form style="width: 250px" method="post" action="Identity/Account/LogOut">
                        <button type="submit">
                            <MudMenuItem>
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Logout">Logout</MudButton>
                            </MudMenuItem>
                        </button>
                    </form>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <MudButton Class="mr-5" StartIcon="@Icons.Material.Filled.Login" Link="/Identity/Account/Login" Color="Color.Primary">Login</MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.PersonAdd" Link="/Identity/Account/Register" Color="Color.Success">Register</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudNavMenu Class="mud-width-full">
            <MudText Typo="Typo.h6" Class="px-4 mt-1" Style="color: #FF8000; user-select: none">wowindex.io</MudText>
            <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Warcraft rankings</MudText>
            <MudDivider Class="my-2" />
            @*<MudText Typo="Typo.subtitle2" Color="Color.Inherit" Class="ml-4 my-3">Leaderboards</MudText>*@
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Outlined.EmojiEvents">Hall of fame</MudNavLink>
            <MudNavLink Href="/progress" Match="NavLinkMatch.All" Icon="@Icons.Filled.Stream">Live Raid Progression</MudNavLink>
            <MudNavLink Href="/about" Icon="@Icons.Outlined.Info">About</MudNavLink>
            <MudNavLink Href="/contact" Icon="@Icons.Outlined.AlternateEmail">Contact</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {

    Models.Index.MainLayoutModel model = new Models.Index.MainLayoutModel();

    [Parameter]
    public string region { get; set; }

    public string ProfilePic { get; set; } = "img/profile-icon.svg";
    public string BattleTagName = "";
    public string BattleTagId = "";

    bool hasProfile = true;
    bool isLoggedIn = true;
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public HttpClient apiConnection()
    {
        var APIclient = new HttpClient();
        APIclient.BaseAddress = new Uri("https://us.api.blizzard.com/");

        return APIclient;
    }

    // method to handle user guild search
    private async Task Search(EditContext context)
    {
        var searchRegion = model.searchRegion;
        var searchQuery = model.SearchGuild;
        var searchQueryRealm = model.SearchGuildRealm;

        // try to find guild in db
        var guild = _context.Guilds.Where(x =>
        x.Region == searchRegion &&
        x.Name == searchQuery).FirstOrDefault();

        if (guild != null)
        {
            // We found the guild in our database!
            // check the age of this guild record
            // send the user to this guilds page (update can be handled there)
            string region = guild.Region;
            string realmSlug = guild.RealmSlug;
            string guildNameSlug = guild.NameSlug;

            // naviagte to guilds page
            NavigationManager.NavigateTo($"/guild/{region}/{realmSlug}/{guildNameSlug}/");
        }
        else // if guild is null
        {
            // get search values
            var searchNameSlug = "";
            var searchRealmSlug = "";
            if (searchQuery != null && searchQueryRealm != null)
            {
                searchNameSlug = searchQuery.Replace(" ", "-").ToLower();
                searchRealmSlug = searchQueryRealm.Replace(" ", "-").ToLower();
            }

            // check api for guild
            var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
            var request = await apiConnection().GetAsync($"data/wow/guild/{searchRealmSlug}/{searchNameSlug}?namespace=profile-eu&locale=en_US&access_token={accessToken.token}");

            if (request.IsSuccessStatusCode)
            {
                // build guild poco
                string result = request.Content.ReadAsStringAsync().Result;
                var GuildObject = JsonConvert.DeserializeObject<WowIndex.Models.POCO.Index.LeaderboardEntriesPOCO>(result);

                var newGuild = new WowIndex.Models.Guild()
                {
                    GuildId = 0,
                    RecordCreationDate = DateTime.Now,
                    Name = "",
                    NameSlug = "",
                    Region = "",
                    Realm = "",
                    RealmSlug = "",
                    RealmId = 0,
                    FactionType = "",
                    FactionName = "",
                };

                // Add new guild to the db
                _context.Guilds.Add(newGuild);
                _context.SaveChanges();

                // redirect user to guild page
            }
            else
            {
                // guild does not exist on API
                Snackbar.Add("Guild not found, Please check region & spelling.", Severity.Normal);
            }
        }
    }


    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#FF8000",
            Black = "#27272f",
            Background = "#141414",
            BackgroundGrey = "#27272f",
            Surface = "#1F1F1F",
            DrawerBackground = "#000000",
            DrawerText = "#b3b3b3",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#232940",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "#FFFFFF",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)"
        }
    };

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;

        if (!user.Identity.IsAuthenticated)
        {
            isLoggedIn = false;
        }

        var character = _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefault();
        var profile = await _context.Profiles.Where(x => user.Identity.Name.Equals(x.AspEmail)).FirstOrDefaultAsync();
        if (character == null)
        {
            hasProfile = false;
        }
        else
        {
            region = character.Region;
            ProfilePic = character.avatar_url;
            BattleTagName = profile.BattleTag.Split('#')[0];
            BattleTagId = "#" + profile.BattleTag.Split('#')[1];
        }
    }

    private async Task OpenProfilePage()
    {
        var user = (await AuthStat).User;
        var character = await _context.Characters.Where(x => user.Identity.Name.Equals(x.Email)).FirstOrDefaultAsync();

        if (character.ExpirationDate < DateTime.Now.AddSeconds(-3))
            NavigationManager.NavigateTo($"/refreshProfile/{region}");
        else
        {
            NavigationManager.NavigateTo("/profile");
        }
    }

}
