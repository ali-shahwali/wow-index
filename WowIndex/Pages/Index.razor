@page "/"
@using WowIndex.Models.RaidingLeaderboards
@using Microsoft.Extensions.Configuration
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart

<MudGrid>
    <MudItem xs="12">
        <MudCard Class="index-banner">
            <MudCardContent>
                <MudText Class="mb-5" Style="color: white" Typo="Typo.h4">Castle Nathria</MudText>
                @if (Diagnostics != null)
                {
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">There are currently <span style="color: white">@Diagnostics.GuildsWithFullClear</span> guilds with full clears on record</MudText>
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">
                        It takes on average <span style="color: white">@Diagnostics.AverageProgressionTime</span> days of progression for a full clear
                        and the most difficult boss appears to be <span style="color: white">@Diagnostics.MostDifficultBoss</span>.
                    </MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="8">
        <MudText Class="mb-2" Typo="Typo.h6">Mythic World Leaderboard</MudText>
        <MudTable Outlined="true" ServerData="@(new Func<TableState, Task<TableData<LeaderboardModel>>>(ServerReload))" @ref="Table" RowsPerPage="15" Dense="true" FixedHeader="true" Hover="true">
            <ToolBarContent>
                <MudItem xs="12" md="3" class="mb-5 mt-5">
                    <MudSelect T="int" Label="Filter by Region" ValueChanged="@(i=>OnFilter(i))">
                        <MudSelectItem T="int" Value="0">Show all</MudSelectItem>
                        <MudSelectItem T="int" Value="1">EU</MudSelectItem>
                        <MudSelectItem T="int" Value="2">US</MudSelectItem>
                        <MudSelectItem T="int" Value="3">KR</MudSelectItem>
                        <MudSelectItem T="int" Value="4">TW</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudToolBarSpacer />
                <MudItem xs="12" md="5" class="mb-5 mt-5">
                    <MudTextField Immediate="true" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudItem>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortLabel="guild" T="LeaderboardModel">Guild</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="realm" T="LeaderboardModel">Realm</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="progress" T="LeaderboardModel">Progress</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Rank">
                    <MudText Color="context.RankColor">@context.Rank</MudText>
                </MudTd>
                <MudTd DataLabel="Guild">
                    @{string link = $"/guild/{context.LeaderboardEntry.Guild.Region.ToLower()}/{context.LeaderboardEntry.Guild.RealmSlug}/{context.LeaderboardEntry.Guild.NameSlug}/";}
                    @if (context.Profile != null && context.Profile.IsRecruiting)
                    {
                        @if (context.LeaderboardEntry.Guild.FactionName == "Horde")
                        {
                            <MudButton Class="table-btn" Link="@link" Color="Color.Error">
                                @context.LeaderboardEntry.Guild.Name
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Class="table-btn" Link="@link" Color="Color.Info">
                                @context.LeaderboardEntry.Guild.Name
                            </MudButton>
                        }
                        <MudTooltip Placement="Placement.End" Text="This guild is recruiting!">
                            <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.GroupAdd" />
                        </MudTooltip>
                    }
                    else
                    {
                        @if (context.LeaderboardEntry.Guild.FactionName == "Horde")
                        {
                            <MudButton Class="table-btn" Link="@link" Color="Color.Error">
                                @context.LeaderboardEntry.Guild.Name
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Class="table-btn" Link="@link" Color="Color.Info">
                                @context.LeaderboardEntry.Guild.Name
                            </MudButton>
                        }
                    }
                </MudTd>
                <MudTd DataLabel="Guild">
                    @context.LeaderboardEntry.Guild.Region.ToUpper() - @context.LeaderboardEntry.Guild.Realm
                </MudTd>
                <MudTd DataLabel="Guild">
                    @if (context.LeaderboardEntry.Progression == 10)
                    {
                        <MudChip Label="true" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">@context.LeaderboardEntry.Progression / 10</MudChip>
                    }
                    else
                    {
                        <MudChip Label="true" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">@context.LeaderboardEntry.Progression / 10</MudChip>
                    }
                    <MudText Typo="Typo.caption">
                        @context.LeaderboardEntry.LatestProgressionTime.ToShortDateString()
                    </MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager DisableRowsPerPage="true" />
            </PagerContent>
        </MudTable>
        @*<Chart Width="600" Height="250" Config="_configLine"></Chart>*@
    </MudItem>
    <MudItem xs="4">
        <MudText Class="mb-2" Typo="Typo.h6">Recent Activity</MudText>
        @foreach (var item in RecentClears)
        {
            <MudCard Class="mb-2" Outlined="true">
                <MudCardContent>
                    @{
                        TimeSpan time = DateTime.Now - item.LatestProgressionTime;
                        string link = $"/guild/{item.Guild.Region}/{item.Guild.RealmSlug}/{item.Guild.NameSlug}/";
                    }
                    <MudText>Congratulations to <a href="@link" style="color: #A970FF;">@item.Guild.Name</a> for clearing castle nathria</MudText>

                    <MudText Typo="Typo.body2">They cleared it @time.Days days and @time.Hours hours ago</MudText>
                </MudCardContent>
            </MudCard>
        }
        <Chart Width="400" Height="400" Config="_configPie"></Chart>
    </MudItem>
</MudGrid>

@code {
    // Properties
    public MudTable<LeaderboardModel> Table;
    public List<LeaderboardModel> Leaderboard { get; set; } = new List<LeaderboardModel>();
    public List<LeaderboardEntry> RecentClears { get; set; } = new List<LeaderboardEntry>();
    public Data.SiteDiagnostic Diagnostics { get; set; }

    public int totalItems;
    public string searchString = "";
    public int SelectedFilter { get; set; } // (filter selection)
    public string SortField { get; set; }
    public string sortDirection { get; set; }

    private PieConfig _configPie;
    private LineConfig _configLine;

    private async Task<TableData<LeaderboardModel>> ServerReload(TableState state)
    {
        SortField = state.SortLabel;
        sortDirection = state.SortDirection.ToString();
        int skip = state.Page * state.PageSize;
        int take = state.PageSize;

        if (searchString == "")
            searchString = "blankSearch";
        if (SortField == null)
            SortField = "None";
        if (searchString == "blankSearch")
            searchString = "";

        var pagedData = new List<LeaderboardModel>();
        var totalCount = new Int32();

        // 1. Base Query
        var results = Leaderboard.Where(item => item.LeaderboardEntry.Guild.Name.Contains(searchString, StringComparison.InvariantCultureIgnoreCase));

        // 2. Apply filters
        if (SelectedFilter != 0)
        {
            if (SelectedFilter == 1)
                results = results.Where(x => x.LeaderboardEntry.Guild.Region == "eu");
            else if (SelectedFilter == 2)
                results = results.Where(x => x.LeaderboardEntry.Guild.Region == "us");
            else if (SelectedFilter == 3)
                results = results.Where(x => x.LeaderboardEntry.Guild.Region == "kr");
            else
                results = results.Where(x => x.LeaderboardEntry.Guild.Region == "tw");

        }


        // 3. Apply Sorting - Order by sort field and direction
        if (sortDirection == "None")
            results = results.OrderBy(item => item.Rank);
        else
        {
            if (sortDirection == "Ascending")
            {
                if (SortField == "guild")
                    results = results.OrderBy(item => item.LeaderboardEntry.Guild.Name);
                if (SortField == "realm")
                    results = results.OrderBy(item => item.LeaderboardEntry.Guild.Realm);
                if (SortField == "progress")
                    results = results.OrderBy(item => item.Rank);
            }
            else
            {
                if (SortField == "guild")
                    results = results.OrderByDescending(item => item.LeaderboardEntry.Guild.Name);
                if (SortField == "realm")
                    results = results.OrderByDescending(item => item.LeaderboardEntry.Guild.Realm);
                if (SortField == "progress")
                    results = results.OrderByDescending(item => item.Rank);
            }

        }

        totalCount = results.Count();

        // 4. Apply Pagination - Once the query has been built up we apply the pagination and convert to a list
        pagedData = results.Skip(skip).Take(take).ToList();

        return new TableData<LeaderboardModel>() { TotalItems = totalCount, Items = pagedData };
    }

    // search
    private void OnSearch(string text)
    {
        Table.CurrentPage = 0;
        searchString = text;
        Table.ReloadServerData();
    }

    // Filter
    private void OnFilter(int value)
    {
        Table.CurrentPage = 0;
        SelectedFilter = value;
        Table.ReloadServerData();
    }

    // Page load
    protected override async Task OnInitializedAsync()
    {
        // get lists
        var LeaderboardEntries = _context.RankedCastleNathriaLeaderboard.ToList();
        var Guilds = _context.Guilds.ToList();
        RecentClears = LeaderboardEntries.Where(x => x.Progression == 10).OrderByDescending(x => x.LatestProgressionTime).Take(5).ToList();
        Diagnostics = _context.SiteDiagnostics.OrderBy(x => x.CreationTime).LastOrDefault();

        LeaderboardEntries = LeaderboardEntries.OrderBy(x => x.Score).ToList();
        int rank = 1;
        foreach (var item in LeaderboardEntries)
        {
            var profile = _context.GuildProfiles.Where(x => x.Guild == item.Guild).FirstOrDefault();
            Leaderboard.Add(new LeaderboardModel { Rank = rank++, LeaderboardEntry = item, Profile = profile, RankColor = Helpers.RankColorHelper.GetColorByRank(rank - 1) });
        }


        // get chart for all clears over time
        //_configLine = Helpers.ChartHelper.GetClearsLineChart(_context);

        // get pie chart for clears in each region
        _configPie = Helpers.ChartHelper.GetRegionPieChart(_context);
        
    }

}
