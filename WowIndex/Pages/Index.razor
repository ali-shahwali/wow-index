@page "/"
@using WowIndex.Models.RaidingLeaderboards
@using Microsoft.Extensions.Configuration
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Common

<MudGrid>
    <MudItem xs="12">
        <MudCard Class="index-banner">
            <MudCardContent>
                <MudText Class="mb-5" Style="color: white" Typo="Typo.h4">Castle Nathria</MudText>
                @if (Diagnostics != null)
                {
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">There are currently <span style="color: white">@Diagnostics.GuildsWithFullClear</span> guilds with full clears on record</MudText>
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">
                        It takes on average <span style="color: white">@Diagnostics.AverageProgressionTime</span> days of progression for a full clear
                        and the most difficult boss appears to be <span style="color: white">@Diagnostics.MostDifficultBoss</span>.
                    </MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="8">
        <MudText Class="mb-2" Typo="Typo.h6">Mythic World Leaderboard</MudText>
        <MudTable Outlined="true" ServerData="@(new Func<TableState, Task<TableData<LeaderboardEntry>>>(ServerReload))" @ref="Table" RowsPerPage="10" Dense="true" FixedHeader="true" Hover="true">
            <ToolBarContent>
                <MudItem xs="12" md="3" class="mb-5 mt-5">
                    <MudSelect T="int" Label="Filter by Region" ValueChanged="@(i=>OnFilter(i))">
                        <MudSelectItem T="int" Value="0">Show all</MudSelectItem>
                        <MudSelectItem T="int" Value="1">EU</MudSelectItem>
                        <MudSelectItem T="int" Value="2">US</MudSelectItem>
                        <MudSelectItem T="int" Value="3">KR</MudSelectItem>
                        <MudSelectItem T="int" Value="4">TW</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudToolBarSpacer />
                <MudItem xs="12" md="5" class="mb-5 mt-5">
                    <MudTextField Immediate="true" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudItem>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortLabel="guild" T="LeaderboardEntry">Guild</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="realm" T="LeaderboardEntry">Realm</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="progress" T="LeaderboardEntry">Progress</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Rank">
                    <MudTooltip Placement="Placement.End">
                        <ChildContent>
                        </ChildContent>
                        <TooltipContent>                        </TooltipContent>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Guild">
                    @{string link = $"/guild/{context.Region.ToLower()}/{context.RealmSlug}/{context.GuildSlug}/";}
                    @if (context.Faction == "Horde")
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Error">
                            @context.GuildName
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Info">
                            @context.GuildName
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Guild">
                    @context.Region.ToUpper() - @context.Realm
                </MudTd>
                <MudTd DataLabel="Guild">
                    @if (context.Progression == 10)
                    {
                        <MudChip Label="true" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
                    }
                    else
                    {
                        <MudChip Label="true" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
                    }
                    <MudText Typo="Typo.caption">
                        @context.LatestProgressionTime.ToShortDateString()
                    </MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager DisableRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="4">
        <MudText Class="mb-2" Typo="Typo.h6">Recent Activity</MudText>
        @foreach (var item in RecentClears)
        {
            <MudCard Class="mb-2" Outlined="true">
                <MudCardContent>
                    @{
                        TimeSpan time = DateTime.Now - item.LatestProgressionTime;
                        string link = $"/guild/{item.Region}/{item.RealmSlug}/{item.GuildSlug}/";
                    }
                    <MudText>Congrats to <a href="@link" style="color: #A970FF;">@item.GuildName</a> for clearing castle nathria</MudText>

                    <MudText Typo="Typo.body2">They cleared it @time.Days days and @time.Hours hours ago</MudText>
                </MudCardContent>
            </MudCard>
        }
        <Chart Width="400" Height="400" Config="_config"></Chart>
    </MudItem>
</MudGrid>

@code {
    // Properties
    public MudTable<LeaderboardEntry> Table;
    public List<LeaderboardEntry> LeaderboardEntries { get; set; }
    public List<LeaderboardEntry> RecentClears { get; set; }
    public List<Models.GuildObjects.Guild> Guilds { get; set; }
    public Data.SiteDiagnostic Diagnostics { get; set; }

    public int totalItems;
    public string searchString = "";
    public int SelectedFilter { get; set; } // (filter selection)
    public string SortField { get; set; }
    public string sortDirection { get; set; }


    string[] labels = { "US", "EU", "KR", "TW" };
    int[] data = { 0, 0, 0, 0 };

    private PieConfig _config;

    private async Task<TableData<LeaderboardEntry>> ServerReload(TableState state)
    {
        SortField = state.SortLabel;
        sortDirection = state.SortDirection.ToString();
        int skip = state.Page * state.PageSize;
        int take = state.PageSize;

        if (searchString == "") searchString = "blankSearch";
        if (SortField == null) SortField = "None";

        if (searchString == "blankSearch") searchString = "";

        var pagedData = new List<LeaderboardEntry>();
        var totalCount = new Int32();

        // 1. Base Query
        var results = _context.RankedCastleNathriaLeaderboard.Where(
            item =>
            (item.Faction.Contains(searchString) ||
            item.GuildName.Contains(searchString))
            );

        // 2. Apply filters
        if (SelectedFilter != 0)
        {
            if (SelectedFilter == 1)
                results = results.Where(x => x.Region == "eu");
            else if (SelectedFilter == 2)
                results = results.Where(x => x.Region == "us");
            else if (SelectedFilter == 3)
                results = results.Where(x => x.Region == "kr");
            else
                results = results.Where(x => x.Region == "tw");

        }

        /*
        // 3. Apply Sorting - Order by sort field and direction
        if (sortDirection == "None")
            results = results.OrderBy(item => item.RankWorld);
        else
        {
            if (sortDirection == "Ascending")
            {
                if (SortField == "guild") 
                    results = results.OrderBy(item => item.GuildName);
                if (SortField == "realm") 
                    results = results.OrderBy(item => item.Realm);
                if (SortField == "progress") 
                    results = results.OrderBy(item => item.RankWorld);
            }
            else
            {
                if (SortField == "guild") 
                    results = results.OrderByDescending(item => item.GuildName);
                if (SortField == "realm") 
                    results = results.OrderByDescending(item => item.Realm);
                if (SortField == "progress") 
                    results = results.OrderByDescending(item => item.RankWorld);
            }

        }
        */
        totalCount = results.Count();

        // 4. Apply Pagination - Once the query has been built up we apply the pagination and convert to a list
        pagedData = results.Skip(skip).Take(take).ToList();

        return new TableData<LeaderboardEntry>() { TotalItems = totalCount, Items = pagedData };
    }

    // search
    private void OnSearch(string text)
    {
        Table.CurrentPage = 0;
        searchString = text;
        Table.ReloadServerData();
    }

    // Filter
    private void OnFilter(int value)
    {
        Table.CurrentPage = 0;
        SelectedFilter = value;
        Table.ReloadServerData();
    }

    // Page load
    protected override async Task OnInitializedAsync()
    {
        // get lists
        LeaderboardEntries = _context.RankedCastleNathriaLeaderboard.ToList();
        RecentClears = LeaderboardEntries.Where(x => x.Progression == 10).OrderByDescending(x => x.LatestProgressionTime).Take(5).ToList();
        Guilds = _context.Guilds.ToList();
        Diagnostics = _context.SiteDiagnostics.OrderBy(x => x.CreationTime).LastOrDefault();

        data[0] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "us").Count();
        data[1] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "eu").Count();
        data[2] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "kr").Count();
        data[3] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "tw").Count();

        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Region Representation",
                    FontColor = ColorUtil.ColorHexString(255, 255, 255),
                    FontSize = 16,
                },
                Legend = new Legend
                {
                    Labels = new LegendLabels
                    {
                        FontColor = ColorUtil.ColorHexString(255, 255, 255)
                    }
                }
            }
        };

        foreach (string label in labels)
            _config.Data.Labels.Add(label);

        PieDataset<int> dataset = new PieDataset<int>(data)
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(156, 8, 8),
                ColorUtil.ColorHexString(32, 46, 201),
                ColorUtil.ColorHexString(83, 49, 204),
                ColorUtil.ColorHexString(64, 140, 31)
            },
            BorderColor = ColorUtil.ColorHexString(50, 51, 61),
            HoverBorderWidth = 5
        };

        _config.Data.Datasets.Add(dataset);
    }
}
