@page "/"
@using WowIndex.Models.RaidingLeaderboards
@using Microsoft.Extensions.Configuration

<MudGrid>
    <MudItem xs="12">
        <MudCard Class="index-banner">
            <MudCardContent>
                <MudText Class="mb-5" Style="color: white" Typo="Typo.h4">Castle Nathria</MudText>
                @if (Diagnostics != null)
                {
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">There are currently <span style="color: white">@Diagnostics.GuildsWithFullClear</span> guilds with full clears on record</MudText>
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">
                        It takes on average <span style="color: white">@Diagnostics.AverageProgressionTime</span> days of progression for a full clear
                        and the most difficult boss appears to be <span style="color: white">@Diagnostics.MostDifficultBoss</span>.
                    </MudText>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="8">
        <MudText Class="mb-2" Typo="Typo.h6">Mythic World Leaderboard</MudText>
        <MudTable Outlined="true" Items="LeaderboardEntries" RowsPerPage="20" Dense="true" FixedHeader="true" @ref="Table" Hover="true">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Guild</MudTh>
                <MudTh>Realm</MudTh>
                <MudTh>Progress</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Rank">
                    @{ string worldRank = $"World rank: {context.RankWorld}";
                       string realmRank= $"Realm rank: {context.RankRealm}";}
                    <MudTooltip Placement="Placement.End">
                        <ChildContent>
                            @if (context.RankWorld <= 3)
                            {
                                <MudText Color="@Color.Primary">@context.RankWorld</MudText>
                            }
                            else if (context.RankWorld <= 10)
                            {
                                <MudText Style="color: blueviolet">@context.RankWorld</MudText>
                            }
                            else
                            {
                                <MudText Color="Color.Info">@context.RankWorld</MudText>
                            }
                        </ChildContent>
                        <TooltipContent>
                            <MudText Typo="Typo.body2">@realmRank</MudText>
                        </TooltipContent>
                    </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Guild">
                    @{string link = $"/guild/{context.Region.ToLower()}/{context.RealmSlug}/{context.GuildSlug}/";}
                    @if (context.Faction == "Horde")
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Error">
                            @context.GuildName
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Info">
                            @context.GuildName
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Guild">
                    @context.Region.ToUpper() - @context.Realm
                </MudTd>
                <MudTd DataLabel="Guild">
                    @if (context.Progression == 10)
                    {
                        <MudChip Label="true" Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
                    }
                    else
                    {
                        <MudChip Label="true" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
                    }
                    <MudText Typo="Typo.caption">
                        @context.LatestProgressionTime.ToShortDateString()
                    </MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager DisableRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="4">
        <MudText Class="mb-2" Typo="Typo.h6">Recent Activity</MudText>
        @foreach (var item in RecentClears)
        {
            <MudCard Class="mb-2" Outlined="true">
                <MudCardContent>
                    @{
                        TimeSpan time = DateTime.Now - item.LatestProgressionTime;
                        string link = $"/guild/{item.Region}/{item.RealmSlug}/{item.GuildSlug}/";
                    }
                    <MudText>Congrats to <a href="@link" style="color: darkmagenta">@item.GuildName</a> for clearing castle nathria</MudText>

                    <MudText Typo="Typo.body2">They cleared it @time.Days days and @time.Hours hours ago</MudText>
                </MudCardContent>
            </MudCard>
        }

    <MudText Class="mt-5" Style="color: white" Typo="Typo.h6">Region Representation</MudText>
        <MudChart ChartType="ChartType.Donut" InputData="@data" InputLabels="@labels" Width="300px" Height="300px" Class="mt-5" />
    </MudItem>
</MudGrid>

@code {
    // Properties
    public MudTable<LeaderboardEntry> Table;
    public List<LeaderboardEntry> LeaderboardEntries { get; set; }
    public List<LeaderboardEntry> RecentClears { get; set; }
    public List<Models.GuildObjects.Guild> Guilds { get; set; }
    public Data.SiteDiagnostic Diagnostics { get; set; }

    string[] labels = { "US", "EU", "KR", "TW" };
    double[] data = {0,0,0,0 };

    // Page load
    protected override async Task OnInitializedAsync()
    {
        // get lists
        LeaderboardEntries = _context.RankedCastleNathriaLeaderboard.ToList();
        RecentClears = _context.RankedCastleNathriaLeaderboard.Where(x => x.Progression == 10).OrderByDescending(x => x.LatestProgressionTime).Take(5).ToList();
        Guilds = _context.Guilds.ToList();
        Diagnostics = _context.SiteDiagnostics.OrderBy(x => x.CreationTime).LastOrDefault();

        if (LeaderboardEntries.Count == 0 || (LeaderboardEntries.FirstOrDefault().ExpirationTime < DateTime.Now))
        {
            // delete outdated records
            if (LeaderboardEntries.Count > 0)
            {
                _context.RankedCastleNathriaLeaderboard.RemoveRange(LeaderboardEntries);
                _context.SaveChanges();
            }

            // build up a sorted leaderboard
            var Leaderboard = _context.KillTimeCastleNathria.ToList();
            var LeaderboardSorted = Helpers.RaidDataHelper.SortLeaderboard(Leaderboard);

            int rankWorld = 1;
            foreach (var item in LeaderboardSorted)
            {
                var guild = Guilds.Where(x => x.Id == item.GuildId).FirstOrDefault();
                int RealmRank = Helpers.CalculateRealmRankHelper.RealmRank(guild, Leaderboard, Guilds);
                DateTime killTime = new DateTime();
                DateTime[] bossTimes = Helpers.CastleNathriaKillTimeHelper.GetKillTimes(item);
                foreach (var time in bossTimes)
                {
                    if (time != new DateTime())
                    {
                        killTime = time;
                        break;
                    }
                }

                // build entry to display in list on page
                LeaderboardEntry entry = new LeaderboardEntry
                {
                    RankWorld = rankWorld,
                    RankRealm = RealmRank,
                    LatestProgressionTime = killTime,
                    GuildName = guild.Name,
                    Faction = guild.FactionName,
                    Realm = guild.Realm,
                    Region = guild.Region,
                    Progression = item.Progress,
                    GuildSlug = guild.NameSlug,
                    RealmSlug = guild.RealmSlug
                };

                LeaderboardEntries.Add(entry);

                // add this new soted list to the db
                _context.RankedCastleNathriaLeaderboard.Add(entry);
                rankWorld++;
            }

            await _context.SaveChangesAsync();
        }

        data[0] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "us").Count();
        data[1] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "eu").Count();
        data[2] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "kr").Count();
        data[3] = _context.RankedCastleNathriaLeaderboard.Where(x => x.Region == "tw").Count();

        LeaderboardEntries = LeaderboardEntries.OrderBy(x => x.RankWorld).ToList();
    }
}
