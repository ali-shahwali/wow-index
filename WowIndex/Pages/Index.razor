@page "/"
@using WowIndex.Models.RaidingLeaderboards
@using Microsoft.Extensions.Configuration


<style>
    mud-paper {
        background-image: url("../wwwroot/img/castle_nathria.jpg");
    }
</style>


<MudGrid>
    <MudItem xs="12">
        <MudCard Class="index-banner">
            <MudCardContent>
                <MudText Style="color: white" Typo="Typo.h6">Castle Nathria</MudText>
                @if (diagnostics != null)
                {
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">There are currently @diagnostics.GuildsWithFullClear guilds with full clears on record</MudText>
                    <MudText Style="color: cornflowerblue" Typo="Typo.body1">
                        It takes on average @diagnostics.AverageProgressionTime days of progression for a full clear
                        and the most difficult boss appears to be @diagnostics.MostDifficultBoss .
                    </MudText>
                }
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="8">
        <MudText Class="mb-2" Typo="Typo.h6">Mythic World Leaderboard</MudText>
        <MudTable Outlined="true" ServerData="@(new Func<TableState, Task<TableData<LeaderboardEntry>>>(ServerReload))" RowsPerPage="20" Dense="true" FixedHeader="true" @ref="table" Hover="true">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Guild</MudTh>
                <MudTh>Realm</MudTh>
                <MudTh>Progress</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Rank">
                    @if (context.Rank <= 3)
                    {
                        <MudText Color="@Color.Primary">@context.Rank</MudText>
                    }
                    else if (context.Rank <= 10)
                    {
                        <MudText Style="color: blueviolet">@context.Rank</MudText>
                    }
                    else
                    {
                        <MudText Color="Color.Info">@context.Rank</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Guild">
                    @{ var link = $"/guild/{context.Region.ToLower()}/{context.RealmSlug}/{context.GuildSlug}/"; }
                    @if (context.Faction == "Horde")
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Error">
                            @context.GuildName
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Class="table-btn" Link="@link" Color="Color.Info">
                            @context.GuildName
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Guild">
                    @context.Realm
                </MudTd>
                <MudTd DataLabel="Guild">
                    <MudChip Label="true" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
                    <MudText Typo="Typo.caption">
                        @context.LatestProgressionTime
                    </MudText>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager DisableRowsPerPage="true" />
            </PagerContent>
        </MudTable>
    </MudItem>
    <MudItem xs="4">
        <MudText Class="mb-2" Typo="Typo.h6">Recent Activity</MudText>
        <MudCard Class="mb-2" Outlined="true">
            <MudCardContent>
                <MudText>Story of the day</MudText>
                <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
            </MudCardContent>
        </MudCard>
        <MudCard Class="mb-2" Outlined="true">
            <MudCardContent>
                <MudText>Story of the day</MudText>
                <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
            </MudCardContent>
        </MudCard>
        <MudCard Class="mb-2" Outlined="true">
            <MudCardContent>
                <MudText>Story of the day</MudText>
                <MudText Typo="Typo.body2">The quick, brown fox jumps over a lazy dog.</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>




@code {
    public MudTable<LeaderboardEntry> table;

    public List<LeaderboardEntry> leaderboardEntries = new List<LeaderboardEntry>();

    public Data.SiteDiagnostic diagnostics { get; set; }

    protected override async Task OnInitializedAsync()
    {

        diagnostics = await _context.SiteDiagnostics.OrderBy(x => x.CreationTime).LastOrDefaultAsync();
    }

    private async Task<TableData<LeaderboardEntry>> ServerReload(TableState state)
    {
        var RaidRanks = _context.RankedCastleNathriaLeaderboard.ToList();

        if (RaidRanks.Count == 0 || (RaidRanks.FirstOrDefault().ExpirationTime < DateTime.Now))
        {
            _context.RankedCastleNathriaLeaderboard.RemoveRange(RaidRanks);
            await _context.SaveChangesAsync();

            // bind records from database

            var leaderboard = await _context.KillTimeCastleNathria.ToListAsync();
            List<KillTimeCastleNathria> results = new List<KillTimeCastleNathria>();

            results.AddRange(leaderboard.Where(x => x.Progress == 10).OrderBy(x => x.Boss10KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 9).OrderBy(x => x.Boss9KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 8).OrderBy(x => x.Boss8KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 7).OrderBy(x => x.Boss7KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 6).OrderBy(x => x.Boss6KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 5).OrderBy(x => x.Boss5KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 4).OrderBy(x => x.Boss4KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 3).OrderBy(x => x.Boss3KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 2).OrderBy(x => x.Boss2KillTime));
            results.AddRange(leaderboard.Where(x => x.Progress == 1).OrderBy(x => x.Boss1KillTime));

            int i = 1;
            var guilds = _context.Guilds.ToList();
            foreach (var item in results)
            {
                var guild = guilds.Where(x => x.Id == item.GuildId).FirstOrDefault();
                DateTime killTime = new DateTime();
                DateTime[] bossTimes = Helpers.CastleNathriaKillTimeHelper.GetKillTimes(item);
                foreach (var time in bossTimes)
                {
                    if (time != new DateTime())
                    {
                        killTime = time;
                        break;
                    }
                }

                LeaderboardEntry entry = new LeaderboardEntry
                {
                    Rank = i,
                    LatestProgressionTime = killTime,
                    GuildName = guild.Name,
                    Faction = guild.FactionName,
                    Realm = guild.Realm,
                    Region = guild.Region,
                    Progression = item.Progress,
                    GuildSlug = guild.NameSlug,
                    RealmSlug = guild.RealmSlug
                };

                leaderboardEntries.Add(entry);
                _context.RankedCastleNathriaLeaderboard.Add(entry);
                i++;
            }
            await _context.SaveChangesAsync();
        }
        else
        {
            leaderboardEntries = RaidRanks;
        }

        return new TableData<LeaderboardEntry>() { Items = leaderboardEntries.OrderBy(x => x.Rank) };
    }
}
