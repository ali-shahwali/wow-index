@page "/"
@using WowIndex.Models.RaidingLeaderboards
@using Microsoft.Extensions.Configuration
@inject WowIndex.Data.ApplicationDbContext _context

<MudTable ServerData="@(new Func<TableState, Task<TableData<LeaderboardEntry>>>(ServerReload))" RowsPerPage="20" Dense="true" FixedHeader="true" @ref="table" Hover="true">
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Guild</MudTh>
        <MudTh>Realm</MudTh>
        <MudTh>Progress</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Rank">
            @context.Rank
        </MudTd>
        <MudTd DataLabel="Guild">
            @{ var link = $"/guild/{context.Region.ToLower()}/{context.RealmSlug}/{context.GuildSlug}/"; }
            <MudButton Link="@link" Color="Color.Info">
                @context.GuildName
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Guild">
            @context.Realm
        </MudTd>
        <MudTd DataLabel="Guild">
            <MudChip Label="true" Size="Size.Small" Variant="Variant.Outlined">@context.Progression / 10</MudChip>
            <MudText Typo="Typo.caption">
                @context.LatestProgressionTime
            </MudText>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager DisableRowsPerPage="true" />
    </PagerContent>
</MudTable>

@code {
    public MudTable<LeaderboardEntry> table;

    private async Task<TableData<LeaderboardEntry>> ServerReload(TableState state)
    {
        var rows = from x in _context.RankedCastleNathriaLeaderboard select x;
        _context.RankedCastleNathriaLeaderboard.RemoveRange(rows);
        _context.SaveChanges();

        // bind records from database

        var leaderboard = await _context.LeaderboardCastleNathria.ToListAsync();
        List<LeaderboardCastleNathria> results = new List<LeaderboardCastleNathria>();

        results.AddRange(leaderboard.Where(x => x.Progress == 10).OrderBy(x => x.Boss10KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 9).OrderBy(x => x.Boss9KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 8).OrderBy(x => x.Boss8KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 7).OrderBy(x => x.Boss7KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 6).OrderBy(x => x.Boss6KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 5).OrderBy(x => x.Boss5KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 4).OrderBy(x => x.Boss4KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 3).OrderBy(x => x.Boss3KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 2).OrderBy(x => x.Boss2KillTime));
        results.AddRange(leaderboard.Where(x => x.Progress == 1).OrderBy(x => x.Boss1KillTime));

        List<LeaderboardEntry> leaderboardEntries = new List<LeaderboardEntry>();
        int i = 1;
        foreach (var item in results)
        {
            var guild = await _context.Guilds.Where(x => x.Id == item.GuildId).FirstOrDefaultAsync();
            DateTime killTime = new DateTime();
            if (item.Boss10KillTime != new DateTime())
                killTime = item.Boss10KillTime;
            else if (item.Boss9KillTime != new DateTime())
                killTime = item.Boss9KillTime;
            else if (item.Boss8KillTime != new DateTime())
                killTime = item.Boss8KillTime;
            else if (item.Boss7KillTime != new DateTime())
                killTime = item.Boss7KillTime;
            else if (item.Boss6KillTime != new DateTime())
                killTime = item.Boss6KillTime;
            else if (item.Boss5KillTime != new DateTime())
                killTime = item.Boss5KillTime;
            else if (item.Boss4KillTime != new DateTime())
                killTime = item.Boss4KillTime;
            else if (item.Boss3KillTime != new DateTime())
                killTime = item.Boss3KillTime;
            else if (item.Boss2KillTime != new DateTime())
                killTime = item.Boss2KillTime;
            else if (item.Boss1KillTime != new DateTime())
                killTime = item.Boss1KillTime;

            LeaderboardEntry entry = new LeaderboardEntry
            {
                Rank = i,
                LatestProgressionTime = killTime,
                GuildName = guild.Name,
                Faction = guild.FactionName,
                Realm = guild.Realm,
                Region = guild.Region,
                Progression = item.Progress,
                GuildSlug = guild.NameSlug,
                RealmSlug = guild.RealmSlug
            };
            leaderboardEntries.Add(entry);
            _context.RankedCastleNathriaLeaderboard.Add(entry);
            i++;
        }
        await _context.SaveChangesAsync();

        StateHasChanged();
        return new TableData<LeaderboardEntry>() { Items = leaderboardEntries };
    }
}
