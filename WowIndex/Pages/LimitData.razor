@page "/limitData"
@using WowIndex.CustomScrapers
@using System.Net.Http.Headers
<MudContainer>

    <MudText Class="my-6" Typo="Typo.h4">&lt;LIMIT&gt;Maxibabe - Castle Nathria Achievements</MudText>
    <MudGrid Class="mt-8">
        @foreach (var item in model)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@item.Name</MudText>
                        </CardHeaderContent>
                        @*<CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </CardHeaderActions>*@
                    </MudCardHeader>
                    <MudCardContent>
                        @if (item.Time.ToString() != "1/1/0001 12:00:00 AM")
                        {
                            <MudChip Size="Size.Small" Icon="@Icons.Material.Outlined.CheckCircleOutline" Color="Color.Success">Completed</MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small" Icon="@Icons.Material.Outlined.HighlightOff" Color="Color.Error">Incomplete</MudChip>
                        }
                        <MudText Class="mt-5" Typo="Typo.body2">@item.Description</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        @if (item.Time.ToString() != "1/1/0001 12:00:00 AM")
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary">@item.Time.ToString()</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>


@code {
        List<WowIndex.Models.RaidAchievement> model = new List<WowIndex.Models.RaidAchievement>();

    public string FullPage { get; set; }

    public List<string> items = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        string region = "us";
        string realm = "illidan";
        string guildSlug = "complexity-limit";

        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");

        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);

        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");

        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.GuildRosterPOCO roster = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString);
        Models.POCO.Member[] rosterMembers = roster.members.OrderBy(x => x.rank).ToArray();

        List<Models.POCO.CharacterAchievementPOCO.Achievement[]> allCharacters = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();
        int[] progressionCheck = new int[10];
        int progression = 0;
        client.DefaultRequestHeaders.Range = new RangeHeaderValue(0, 100);
        byte[] bytes;
        foreach (Models.POCO.Member item in rosterMembers)
        {
            if (item.character.level == 60)
            {

                var characterResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}", HttpCompletionOption.ResponseHeadersRead);
                using (var stream = await response.Content.ReadAsStreamAsync())
                {
                    bytes = new byte[100];
                    var bytesread = stream.Read(bytes, 0, bytes.Length);
                    stream.Close();
                }
                string r = System.Text.Encoding.UTF8.GetString(bytes);
            }
            /*
            Models.POCO.CharacterAchievementPOCO.CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<Models.POCO.CharacterAchievementPOCO.CharacterAchievement>(characterString);
            Models.POCO.CharacterAchievementPOCO.Achievement[] character = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();
            if (character == null)
                continue;

            allCharacters.Add(character);
            progressionCheck[character.Length - 1] += 1;
        }
        for(int i = 9; i >= 0; i--)
        {
            if(progressionCheck[i] == 15)
            {
                progression = i + 1;
            }
        }
        if (progression != 0)
            break;
            */
        }

        StateHasChanged();
    }
}
