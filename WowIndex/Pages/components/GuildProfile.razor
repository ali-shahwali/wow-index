@page "/guild/{region}/{realm}/{guildSlug}/"
@using WowIndex.CustomScrapers

@if (isLoading)
{
    <MudProgressLinear Buffer="true" Color="Color.Primary" Value="@estTimeLeft" Min="0" Max="rosterMembers.Length" Class="my-7" />
    <MudText Typo="Typo.h2">This page is being added...</MudText>
    <MudText Typo="Typo.h4">Check back within the minute!</MudText>
}
else
{
    <MudButton Disabled="!isOutdated" OnClick="Update">Update</MudButton>
    <MudContainer>
        <MudText>@Guild.Name</MudText>
    </MudContainer>
}

@code {
    // site parameters
    [Parameter] public string region { get; set; }
    [Parameter] public string realm { get; set; }
    [Parameter] public string guildSlug { get; set; }

    // rendering variables
    public bool isLoading { get; set; }
    public bool isOutdated { get; set; }
    public int estTimeLeft { get; set; }

    // data
    public Models.Guild Guild = new Models.Guild();
    public Models.POCO.Member[] rosterMembers { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Guild = await _context.Guilds.Where(x => x.NameSlug == guildSlug && x.Region == region && x.RealmSlug == realm).FirstOrDefaultAsync();
        StateHasChanged();

        var leaderboards = await _context.LeaderboardCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefaultAsync();
        if (leaderboards == null)
        {
            isLoading = true;
            DateTime startTime = DateTime.Now;
            HttpClient client = new HttpClient();

            client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
            var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
            var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");

            string rosterString = await response.Content.ReadAsStringAsync();

            Models.POCO.GuildRosterPOCO roster = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString);
            rosterMembers = roster.members.Where(x => x.character.level == 60).OrderBy(x => x.rank).ToArray();

            List<Models.POCO.CharacterAchievementPOCO.Achievement[]> allCharacters = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();

            // loop variables
            int[] progressionTally = new int[10];
            int iterations = 0;
            int progression = 0;
            estTimeLeft = 0;
            foreach (Models.POCO.Member item in rosterMembers)
            {
                var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
                var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;

                Models.POCO.CharacterAchievementPOCO.CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<Models.POCO.CharacterAchievementPOCO.CharacterAchievement>(apiResponseString);
                Models.POCO.CharacterAchievementPOCO.Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

                if (validAchievements.Length > 0)
                {
                    progressionTally[validAchievements.Length - 1]++;
                    allCharacters.Add(validAchievements);
                    iterations++;
                    estTimeLeft += rosterMembers.Length / 15;
                }

                if (iterations >= 15)
                {
                    for (int i = 9; i >= 0; i--)
                    {
                        if (progressionTally[i] >= 15)
                        {
                            progression = i + 1;
                        }
                    }
                }

                if (progression != 0)
                {
                    // add this guilds progress to leaderboard
                    List<Models.POCO.CharacterAchievementPOCO.Achievement[]> raidTeam = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();
                    foreach (var character in allCharacters.Where(x => x.Length == progression))
                        raidTeam.Add(character);

                    DateTime[] bossKills = GetBossTimes(raidTeam);

                    leaderboards = new Models.RaidingLeaderboards.LeaderboardCastleNathria
                    {
                        GuildId = Guild.Id,
                        Progress = progression,
                        ExpirationDate = DateTime.Now.AddMinutes(15),
                        Boss1KillTime = bossKills[0],
                        Boss2KillTime = bossKills[1],
                        Boss3KillTime = bossKills[2],
                        Boss4KillTime = bossKills[3],
                        Boss5KillTime = bossKills[4],
                        Boss6KillTime = bossKills[5],
                        Boss7KillTime = bossKills[6],
                        Boss8KillTime = bossKills[7],
                        Boss9KillTime = bossKills[8],
                        Boss10KillTime = bossKills[9],
                    };

                    _context.LeaderboardCastleNathria.Add(leaderboards);
                    await _context.SaveChangesAsync();
                    estTimeLeft = rosterMembers.Length;
                    break;
                }

                StateHasChanged();
                TimeSpan RequestTime = DateTime.Now - startTime;
            }
            isLoading = false;
        }
        else if (leaderboards.ExpirationDate < DateTime.Now)
        {
            isOutdated = true;
        }

        StateHasChanged();
    }

    public async Task Update()
    {
        var oldLeaderboards = await _context.LeaderboardCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefaultAsync();
        _context.LeaderboardCastleNathria.Remove(oldLeaderboards);

        if(oldLeaderboards.Progress == 10)
        {
            Snackbar.Add($"Progression completed on {oldLeaderboards.Boss10KillTime.ToString()}", Severity.Normal);
            return;
        }

        isLoading = true;
        DateTime startTime = DateTime.Now;
        HttpClient client = new HttpClient();

        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");

        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.GuildRosterPOCO roster = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString);
        rosterMembers = roster.members.Where(x => x.character.level == 60).OrderBy(x => x.rank).ToArray();

        List<Models.POCO.CharacterAchievementPOCO.Achievement[]> allCharacters = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();

        int[] progressionTally = new int[10];
        int iterations = 0;
        int progression = 0;
        estTimeLeft = rosterMembers.Length;
        foreach (Models.POCO.Member item in rosterMembers)
        {
            var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
            var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;

            Models.POCO.CharacterAchievementPOCO.CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<Models.POCO.CharacterAchievementPOCO.CharacterAchievement>(apiResponseString);
            Models.POCO.CharacterAchievementPOCO.Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

            if (validAchievements.Length > 0)
            {
                progressionTally[validAchievements.Length - 1]++;
                allCharacters.Add(validAchievements);
                iterations++;
                estTimeLeft += rosterMembers.Length / 15;
            }

            if (iterations >= 15)
            {
                for (int i = 9; i >= 0; i--)
                {
                    if (progressionTally[i] >= 15)
                    {
                        progression = i + 1;
                    }
                }
            }
            if (progression != 0)
            {
                List<Models.POCO.CharacterAchievementPOCO.Achievement[]> raidTeam = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();
                foreach (var character in allCharacters.Where(x => x.Length == progression))
                    raidTeam.Add(character);

                DateTime[] bossKills = GetBossTimes(raidTeam);

                // add this guilds progress to leaderboard
                Models.RaidingLeaderboards.LeaderboardCastleNathria leaderboards = new Models.RaidingLeaderboards.LeaderboardCastleNathria
                {
                    GuildId = Guild.Id,
                    Progress = progression,
                    ExpirationDate = DateTime.Now.AddMinutes(15),
                    Boss1KillTime = bossKills[0],
                    Boss2KillTime = bossKills[1],
                    Boss3KillTime = bossKills[2],
                    Boss4KillTime = bossKills[3],
                    Boss5KillTime = bossKills[4],
                    Boss6KillTime = bossKills[5],
                    Boss7KillTime = bossKills[6],
                    Boss8KillTime = bossKills[7],
                    Boss9KillTime = bossKills[8],
                    Boss10KillTime = bossKills[9],
                };

                _context.LeaderboardCastleNathria.Add(leaderboards);
                await _context.SaveChangesAsync();
                estTimeLeft = rosterMembers.Length;
                break;
            }

            StateHasChanged();
            TimeSpan RequestTime = DateTime.Now - startTime;
        }
        isLoading = false;
    }

    private DateTime[] GetBossTimes(List<Models.POCO.CharacterAchievementPOCO.Achievement[]> raidTeam)
    {
        DateTime[] bossKills = new DateTime[10];

        DateTime[] earliestKill = new DateTime[10];

        int j = 0;
        foreach (var member in raidTeam)
        {
            foreach (var achievement in member)
            {
                // conversion to human datetime
                string str = achievement.completed_timestamp.ToString();
                str = str.Substring(0, str.Length - 3);
                DateTime killTime = UnixTimeStampToDateTime(Convert.ToInt64(str)).ToUniversalTime();

                if(killTime < earliestKill[j] || earliestKill[j] == new DateTime())
                {
                    earliestKill[j] = killTime;
                    bossKills[j] = killTime;
                }

                j++;
            }
            j = 0;
        }

        return bossKills;
    }

    public static DateTime UnixTimeStampToDateTime(long unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch
        DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dtDateTime;
    }

}

