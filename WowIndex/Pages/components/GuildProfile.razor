@page "/guild/{region}/{realm}/{guildSlug}/"
@using Models.GuildObjects
@using Models.RaidingLeaderboards
@using Models.POCO.CharacterAchievementPOCO

@if (isLoading)
{
    <MudProgressLinear Buffer="true" Color="Color.Primary" Value="@estTimeLeft" Min="0" Max="@estGuildRoster" Class="my-7" />
    <MudText Typo="Typo.h2">This page is being added...</MudText>
    <MudText Typo="Typo.h4">Check back within the minute!</MudText>
}
else
{
<MudContainer>
    <MudGrid>
        <MudItem xs="6">
            @{string guildArmory = $"https://worldofwarcraft.com/en-us/guild/{Guild.Region.ToLower()}/{Guild.RealmSlug}/{Guild.NameSlug}";}
            <MudLink Color="Color.Inherit" Target="_blank" Href="@guildArmory" Typo="Typo.h3">@Guild.Name</MudLink>
            @if (rank == null)
            {
                <MudText Typo="Typo.h5" >This guilds rank is still being calculated</MudText>
                <MudText Typo="Typo.h6" >It should be done soon</MudText>

            }
            else if (Convert.ToInt32(rank) <= 3)
            {
                <MudText Color="Color.Primary" Typo="Typo.h5">World ranking:  @rank</MudText>
            }
            else
            {
                <MudText Color="Color.Info" Typo="Typo.h5">World ranking:  @rank</MudText>
            }
        </MudItem>
        <MudItem Class="align-end" xs="6">
            <MudButton Class="ml-auto" Disabled="!isOutdated" OnClick="Update">Update</MudButton>
        </MudItem>
    </MudGrid>
    <MudGrid Spacing="6" Class="mt-16">
        <MudItem xs="8">
            <MudText Typo="Typo.h5" GutterBottom="true">Castle Nathria Overview</MudText>
            @foreach (var stat in bossStats)
            {
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudText>@stat.Name</MudText>
                        @if (stat.KillTime != new DateTime())
                        {
                            <MudText>Killed @stat.KillTime</MudText>
                        }
                    </MudCardContent>
                    <MudCardActions>
                        @if (stat.KillTime != new DateTime())
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Done" Variant="Variant.Text" Color="Color.Success">Down</MudButton>
                        }
                        else
                        {
                            <MudButton StartIcon="@Icons.Material.Filled.Error" Variant="Variant.Text" Color="Color.Error">Not done</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            }
        </MudItem>
        <MudItem xs="4">
            <MudText Typo="Typo.h5" GutterBottom="true">Guild roster</MudText>
            <MudTable Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Items="guildMembers" Filter="new Func<GuildRoster,bool>(FilterFunc)">
                <ToolBarContent>
                    <MudTextField Spellcheck="false" Immediate="true" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <RowTemplate>
                    <MudTd DataLabel="Character">
                        @{ string link = $"https://worldofwarcraft.com/en-us/character/{context.Region.ToLower()}/{context.RealmSlug}/{context.CharacterName}";}
                        <MudButton StartIcon="@Icons.Material.Filled.OpenInNew" Target="_blank" Link="@link" Variant="Variant.Text" Style="@context.class_color">@context.CharacterName</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager DisableRowsPerPage="true" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>
}

@code {
    // site parameters
    [Parameter] public string region { get; set; }
    [Parameter] public string realm { get; set; }
    [Parameter] public string guildSlug { get; set; }

    // rendering variables
    public bool isLoading { get; set; }
    public bool isOutdated { get; set; }
    public int estTimeLeft { get; set; }
    public int estGuildRoster { get; set; } = 100;

    // data
    public Guild Guild = new Guild();
    public List<GuildRoster> guildMembers { get; set; } = new List<GuildRoster>();
    public string[] bossNames =
        {
        "Sire Denathrius", "Stone Legion Generals",
        "Sludgefist", "The Council of Blood", "Lady Inerva Darkvein",
        "Artificer Xy'mox", "Sun King's Salvation", "Hungering Destroyer",
        "Huntsman Altimor", "Shriekwing"
        };
    public List<BossStats> bossStats = new List<BossStats>();
    public string rank { get; set; }
    public string searchString = "";

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        Guild = _context.Guilds.Where(x => x.NameSlug == guildSlug && x.Region == region && x.RealmSlug == realm).FirstOrDefault();
        var raidProgRecord = _context.KillTimeCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefault();

        if (raidProgRecord == null)
            await GetData();
        else
        {
            guildMembers = _context.GuildRoster.Where(x => x.GuildId == Guild.Id).OrderBy(x => x.MemberRank).ToList();

            bossStats = ToBossStatsList(Helpers.CastleNathriaKillTimeHelper.GetKillTimes(raidProgRecord), bossNames);
            if (raidProgRecord.ExpirationDate < DateTime.Now)
                isOutdated = true;
        }

        var result = await _context.RankedCastleNathriaLeaderboard.Where(x => x.GuildName.Equals(Guild.Name)).FirstOrDefaultAsync();
        if (result != null)
            rank = result.Rank.ToString();

        isLoading = false;
        StateHasChanged();
    }

    public async Task Update()
    {
        var oldLeaderboards = await _context.KillTimeCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefaultAsync();

        if (oldLeaderboards.Progress == 10)
        {
            Snackbar.Add($"Progression completed on {oldLeaderboards.Boss10KillTime.ToString()}", Severity.Normal);
            return;
        }

        _context.KillTimeCastleNathria.Remove(oldLeaderboards);
        await _context.SaveChangesAsync();
        await GetData();
    }

    public async Task GetData()
    {
        estTimeLeft = 0;

        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.Member[] rosterMembers = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString)
            .members.Where(x => x.character.level == 60).OrderBy(x => x.rank).ToArray();
        estGuildRoster = rosterMembers.Length;

        var oldGuildRoster = await _context.GuildRoster.Where(x => x.GuildId == Guild.Id).ToListAsync();
        _context.GuildRoster.RemoveRange(oldGuildRoster);
        await _context.SaveChangesAsync();

        foreach (var member in rosterMembers)
        {
            await _context.GuildRoster.AddAsync(new GuildRoster
            {
                CharacterName = member.character.name,
                GuildId = Guild.Id,
                Region = Guild.Region,
                MemberRank = member.rank,
                RealmSlug = member.character.realm.slug,
                playable_class = Helpers.WowClassHelper.GetClassById(member.character.playable_class.id),
                class_color = Helpers.WowClassHelper.GetClassColour(member.character.playable_class.id)

            });
        }

        List<Achievement[]> allCharacters = new List<Achievement[]>();
        int[] progressionTally = new int[10];
        int iterations = 0, progression = 0;
        if (rosterMembers.Length > 20)
        {
            foreach (Models.POCO.Member item in rosterMembers)
            {
                var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
                var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;
                accessToken.RequestsThisHour++;
                _context.Update(accessToken);

                CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<CharacterAchievement>(apiResponseString);
                Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

                if (validAchievements.Length > 0)
                {
                    progressionTally[validAchievements.Length - 1]++;
                    allCharacters.Add(validAchievements);
                    iterations++;
                    estTimeLeft += rosterMembers.Length / 15;
                }

                if (iterations >= 15)
                {
                    for (int i = 9; i >= 0; i--)
                    {
                        if (progressionTally[i] >= 15)
                            progression = i + 1;
                    }
                }
                if (progression != 0)
                {
                    List<Achievement[]> raidTeam = new List<Achievement[]>();
                    foreach (var character in allCharacters.Where(x => x.Length == progression))
                        raidTeam.Add(character);

                    DateTime[] bossKills = GetBossTimes(raidTeam);
                    bossStats = ToBossStatsList(bossKills, bossNames);

                    // add this guilds progress to leaderboard
                    KillTimeCastleNathria newLeaderboards = new KillTimeCastleNathria
                    {
                        GuildId = Guild.Id,
                        Progress = progression,
                        ExpirationDate = DateTime.Now.AddMinutes(15),
                        Boss1KillTime = bossKills[0],
                        Boss2KillTime = bossKills[1],
                        Boss3KillTime = bossKills[2],
                        Boss4KillTime = bossKills[3],
                        Boss5KillTime = bossKills[4],
                        Boss6KillTime = bossKills[5],
                        Boss7KillTime = bossKills[6],
                        Boss8KillTime = bossKills[7],
                        Boss9KillTime = bossKills[8],
                        Boss10KillTime = bossKills[9],
                    };

                    _context.KillTimeCastleNathria.Add(newLeaderboards);
                    estTimeLeft = rosterMembers.Length;
                    break;
                }

                StateHasChanged();
            }
        }
        else
            NavigationManager.NavigateTo("/invalidGuildMessage");

        await _context.SaveChangesAsync();
        guildMembers = await _context.GuildRoster.Where(x => x.GuildId == Guild.Id).OrderBy(x => x.MemberRank).ToListAsync();
    }

    private DateTime[] GetBossTimes(List<Achievement[]> raidTeam)
    {
        DateTime[] bossKills = new DateTime[10];

        DateTime[] earliestKill = new DateTime[10];

        int j = 0;
        foreach (var member in raidTeam)
        {
            foreach (var achievement in member)
            {
                // conversion to human datetime
                string str = achievement.completed_timestamp.ToString();
                str = str.Substring(0, str.Length - 3);
                DateTime killTime = UnixTimeStampToDateTime(Convert.ToInt64(str)).ToUniversalTime();

                if (killTime < earliestKill[j] || earliestKill[j] == new DateTime())
                {
                    earliestKill[j] = killTime;
                    bossKills[j] = killTime;
                }

                j++;
            }
            j = 0;
        }

        return bossKills;
    }

    public static DateTime UnixTimeStampToDateTime(long unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch
        DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dtDateTime;
    }

    private List<BossStats> ToBossStatsList(DateTime[] bossKills, string[] bossNames)
    {
        List<BossStats> stats = new List<BossStats>();
        for (int i = 0; i < 10; i++)
        {
            stats.Add(new BossStats
            {
                Name = bossNames[i],
                KillTime = bossKills[i]
            });
        }
        return stats;
    }

    private bool FilterFunc(GuildRoster element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CharacterName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}