@page "/guild/{region}/{realm}/{guildSlug}/"
@using Models.GuildObjects
@using Models.RaidingLeaderboards
@using Models.POCO.CharacterAchievementPOCO

@if (isLoading)
{
    <MudGrid Class="justify-center mt-16">
        <MudItem xs="12" sm="6" md="4">
            <MudCard Outlined="true" Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">Adding guild</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h6">This should only take a few moments.</MudText>
                    </div>
                    <MudProgressLinear Buffer="true" Color="Color.Primary" Value="@estTimeLeft" Min="0" Max="@estGuildRoster" Class="my-7" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <MudContainer>
        <MudGrid>
            <MudItem xs="6">
                @{string guildArmory = $"https://worldofwarcraft.com/en-us/guild/{Guild.Region.ToLower()}/{Guild.RealmSlug}/{Guild.NameSlug}";}
                <MudLink Color="Color.Inherit" Target="_blank" Href="@guildArmory" Typo="Typo.h3">@Guild.Name</MudLink>
                <MudDivider/>
                <MudText Color="Color.Info" Typo="Typo.h6">World ranking: @RankWorld | Realm ranking: @RankRealm</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudItem Class="d-flex flex-row-reverse">
                    <MudButton StartIcon="@Icons.Material.Filled.Sync" Variant="Variant.Filled" OnClick="Update">Update this page</MudButton>
                </MudItem>
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="6" Class="mt-16">
            <MudItem xs="8">
                <MudText Typo="Typo.h5" GutterBottom="true">Castle Nathria Overview</MudText>
                @foreach (var stat in bossStats)
                {
                    <MudCard Class="mb-2" Outlined="true">
                        <MudCardContent>
                            <MudText>@stat.Name</MudText>
                            @if (stat.KillTime != new DateTime())
                            {
                                <MudText>Killed @stat.KillTime</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            @if (stat.KillTime != new DateTime())
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Done" Variant="Variant.Text" Color="Color.Success">Down</MudButton>
                            }
                            else
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Error" Variant="Variant.Text" Color="Color.Error">Not done</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                }
            </MudItem>
            <MudItem xs="4">
                <MudText Typo="Typo.h5" GutterBottom="true">Roster</MudText>
                <MudTable Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Items="guildMembers" Filter="new Func<GuildRoster,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudTextField Spellcheck="false" Immediate="true" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <RowTemplate>
                        <MudTd DataLabel="Character">
                            @{ string link = $"https://worldofwarcraft.com/en-us/character/{context.Region.ToLower()}/{context.RealmSlug}/{context.CharacterName}";}
                            <MudButton StartIcon="@Icons.Material.Filled.OpenInNew" Target="_blank" Link="@link" Variant="Variant.Text" Style="@context.class_color">@context.CharacterName</MudButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager DisableRowsPerPage="true" />
                    </PagerContent>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    // site parameters
    [Parameter] public string region { get; set; }
    [Parameter] public string realm { get; set; }
    [Parameter] public string guildSlug { get; set; }

    // rendering variables
    public bool isLoading { get; set; }
    public int estTimeLeft { get; set; }
    public int estGuildRoster { get; set; } = 100;

    // data
    public Guild Guild = new Guild();
    public List<GuildRoster> guildMembers { get; set; } = new List<GuildRoster>();
    public string[] bossNames =
        {
        "Sire Denathrius", "Stone Legion Generals",
        "Sludgefist", "The Council of Blood", "Lady Inerva Darkvein",
        "Artificer Xy'mox", "Sun King's Salvation", "Hungering Destroyer",
        "Huntsman Altimor", "Shriekwing"
        };
    public List<BossStats> bossStats = new List<BossStats>();
    public int RankWorld { get; set; }
    public int RankRealm { get; set; }
    public string searchString = "";

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        Guild = _context.Guilds.Where(x => x.NameSlug == guildSlug && x.Region == region && x.RealmSlug == realm).FirstOrDefault();
        var raidProgRecord = _context.KillTimeCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefault();

        if (raidProgRecord == null)
            await GetData();
        else
        {
            guildMembers = _context.GuildRoster.Where(x => x.GuildId == Guild.Id).OrderBy(x => x.MemberRank).ToList();

            bossStats = Helpers.RaidDataHelper.ToBossStatsList(Helpers.CastleNathriaKillTimeHelper.GetKillTimes(raidProgRecord), bossNames);
        }

        var leaderboards = _context.RankedCastleNathriaLeaderboard.OrderByDescending(x => x.Score).ToList();
        if(leaderboards != null)
        {
            RankWorld = leaderboards.FindIndex(x => x.GuildName == Guild.Name) + 1;
            var realmList = leaderboards.Where(x => x.Realm == Guild.Realm).ToList();
            RankRealm = realmList.FindIndex(x => x.GuildName == Guild.Name) + 1;
        }

        isLoading = false;
        StateHasChanged();
    }

    public async Task Update()
    {
        var oldLeaderboards = await _context.KillTimeCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefaultAsync();

        if (oldLeaderboards.Progress == 10)
        {
            Snackbar.Add($"Progression completed on {oldLeaderboards.Boss10KillTime.ToString()}", Severity.Normal);
            return;
        }

        _context.KillTimeCastleNathria.Remove(oldLeaderboards);
        await _context.SaveChangesAsync();
        await GetData();
    }

    public async Task GetData()
    {
        estTimeLeft = 0;

        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.Member[] rosterMembers = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString)
            .members.Where(x => x.character.level == 60).OrderBy(x => x.rank).ToArray();
        estGuildRoster = rosterMembers.Length;

        var oldGuildRoster = await _context.GuildRoster.Where(x => x.GuildId == Guild.Id).ToListAsync();
        _context.GuildRoster.RemoveRange(oldGuildRoster);
        await _context.SaveChangesAsync();

        foreach (var member in rosterMembers)
        {
            await _context.GuildRoster.AddAsync(new GuildRoster
            {
                CharacterName = member.character.name,
                GuildId = Guild.Id,
                Region = Guild.Region,
                MemberRank = member.rank,
                RealmSlug = member.character.realm.slug,
                playable_class = Helpers.WowClassHelper.GetClassById(member.character.playable_class.id),
                class_color = Helpers.WowClassHelper.GetClassColour(member.character.playable_class.id)
            });
        }

        List<Achievement[]> allCharacters = new List<Achievement[]>();
        int[] progressionTally = new int[10];
        int iterations = 0, progression = 0, requests = 0;
        if (rosterMembers.Length > 20)
        {
            foreach (Models.POCO.Member item in rosterMembers)
            {
                var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
                requests++;

                if (apiResponse.IsSuccessStatusCode)
                {
                    var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;
                    CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<CharacterAchievement>(apiResponseString);
                    var check = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).FirstOrDefault();

                    if (check == null)
                        continue;

                    Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

                    if (validAchievements.Length > 0)
                    {
                        progressionTally[validAchievements.Length - 1]++;
                        allCharacters.Add(validAchievements);
                        iterations++;
                        estTimeLeft += rosterMembers.Length / 15;
                    }

                    if (iterations >= 15)
                    {
                        for (int i = 9; i >= 0; i--)
                        {
                            if (progressionTally[i] >= 15)
                                progression = i + 1;
                        }
                    }

                    if (progression != 0)
                    {
                        List<Achievement[]> raidTeam = new List<Achievement[]>();
                        foreach (var character in allCharacters.Where(x => x.Length == progression))
                            raidTeam.Add(character);

                        DateTime[] bossKills = Helpers.RaidDataHelper.GetBossTimes(raidTeam, 10);
                        bossStats = Helpers.RaidDataHelper.ToBossStatsList(bossKills, bossNames);

                        // add this guilds progress to leaderboard
                        KillTimeCastleNathria KillTimes = new KillTimeCastleNathria
                        {
                            GuildId = Guild.Id,
                            Progress = progression,
                            ExpirationDate = DateTime.Now.AddMinutes(15),
                            Boss1KillTime = bossKills[0],
                            Boss2KillTime = bossKills[1],
                            Boss3KillTime = bossKills[2],
                            Boss4KillTime = bossKills[3],
                            Boss5KillTime = bossKills[4],
                            Boss6KillTime = bossKills[5],
                            Boss7KillTime = bossKills[6],
                            Boss8KillTime = bossKills[7],
                            Boss9KillTime = bossKills[8],
                            Boss10KillTime = bossKills[9],
                        };

                        // calculate raid score (put this shiii in appsettings.json)
                        var CastleNathriaReleaseDate = new DateTime(2020, 12, 8, 00, 00, 00);
                        var CastleNathriaTotalBosses = 10;
                        var latestBossKillTime = bossKills[progression - 1];

                        var score1 = CastleNathriaTotalBosses - progression;
                        var score2 = (latestBossKillTime - CastleNathriaReleaseDate).TotalMinutes;

                        var formattedScore = Int32.Parse($"{score1}{score2}");


                        LeaderboardEntry leaderboardEntry = new LeaderboardEntry
                        {
                            Score = formattedScore,
                            LatestProgressionTime = bossKills[progression - 1],
                            Faction = Guild.FactionName,
                            GuildSlug = Guild.NameSlug,
                            GuildName = Guild.Name,
                            Realm = Guild.Realm,
                            RealmSlug = Guild.RealmSlug,
                            Progression = progression,
                            Region = Guild.Region
                        };

                        _context.KillTimeCastleNathria.Add(KillTimes);
                        _context.RankedCastleNathriaLeaderboard.Add(leaderboardEntry);
                        estTimeLeft = rosterMembers.Length;
                        break;
                    }
                }

                StateHasChanged();
            }
        }
        else
            NavigationManager.NavigateTo("/invalidGuildMessage");

        accessToken.RequestsThisHour = requests;
        _context.Update(accessToken);
        await _context.SaveChangesAsync();
        guildMembers = await _context.GuildRoster.Where(x => x.GuildId == Guild.Id).OrderBy(x => x.MemberRank).ToListAsync();
    }

    private bool FilterFunc(GuildRoster element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.CharacterName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

}