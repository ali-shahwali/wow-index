@page "/guild/{region}/{realm}/{guildSlug}/"

@if (isLoading)
{
    <MudProgressLinear Buffer="true" Color="Color.Primary" Value="@estTimeLeft" Min="0" Max="rosterMembers.Length" Class="my-7" />
    <MudText Typo="Typo.h2">This page is being added...</MudText>
    <MudText Typo="Typo.h4">Check back within the minute!</MudText>
}
else
{
    <MudButton Disabled="!isOutdated" OnClick="Update">Update</MudButton>
    <MudContainer>
        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">@Guild.Name</MudText>
        @if (rank == null)
        {
            <MudText Typo="Typo.h4" Align="Align.Center">This guilds rank is still being calculated</MudText>
            <MudText Typo="Typo.h5" Align="Align.Center">It should be done any second</MudText>

        }
        else if (Convert.ToInt32(rank) <= 3)
        {
            <MudText Color="Color.Primary" Typo="Typo.h4" Align="Align.Center">World ranking:  @rank</MudText>
        }
        else
        {
            <MudText Color="Color.Info" Typo="Typo.h4" Align="Align.Center">World ranking:  @rank</MudText>
        }
        <MudGrid Spacing="6" Class="mt-16">
            <MudItem xs="7">
                <MudText Typo="Typo.h5" GutterBottom="true">Castle Nathria Overview</MudText>
                @foreach (var stat in bossStats)
                {
                    <MudCard Outlined="true">
                        <MudCardContent>
                            <MudText>@stat.Name</MudText>
                            @if (stat.KillTime != new DateTime())
                            {
                                <MudText>Killed @stat.KillTime</MudText>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            @if (stat.KillTime != new DateTime())
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Done" Variant="Variant.Text" Color="Color.Success">Down</MudButton>
                            }
                            else
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.Error" Variant="Variant.Text" Color="Color.Error">Not done</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                }
            </MudItem>
            <MudItem xs="5">
                <MudText Typo="Typo.h5" GutterBottom="true">Cart</MudText>
                <MudPaper Class="d-flex flex-column" Style="height:100%;" Outlined="true">
                    <MudList Clickable="true">
                        <MudListItem Icon="@Icons.Material.Filled.ContentCut">
                            <div class="d-flex">
                                <MudText>Scissor - Big</MudText>
                                <MudText Inline="true" Class="ml-auto">$5</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.AirplanemodeActive">
                            <div class="d-flex">
                                <MudText>Model Airplane</MudText>
                                <MudText Class="ml-auto">$20</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.Create">
                            <div class="d-flex">
                                <MudText>Plastic Glue</MudText>
                                <MudText Class="ml-auto">$12</MudText>
                            </div>
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.ColorLens">
                            <div class="d-flex">
                                <MudText>Color set - Modern planes</MudText>
                                <MudText Class="ml-auto">$16</MudText>
                            </div>
                        </MudListItem>
                    </MudList>
                    <div class="mt-auto">
                        <MudDivider />
                        <div class="d-flex pa-4">
                            <MudText>Total:</MudText>
                            <MudText Class="ml-auto"><b>$53</b></MudText>
                        </div>
                    </div>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    // site parameters
    [Parameter] public string region { get; set; }
    [Parameter] public string realm { get; set; }
    [Parameter] public string guildSlug { get; set; }

    // rendering variables
    public bool isLoading { get; set; }
    public bool isOutdated { get; set; }
    public int estTimeLeft { get; set; }

    // data
    public Models.Guild Guild = new Models.Guild();
    public Models.POCO.Member[] rosterMembers { get; set; }
    public string[] bossNames =
        {
        "Sire Denathrius", "Stone Legion Generals",
        "Sludgefist", "The Council of Blood", "Lady Inerva Darkvein",
        "Artificer Xy'mox", "Sun King's Salvation", "Hungering Destroyer",
        "Huntsman Altimor", "Shriekwing"
        };
    public List<Models.BossStats> bossStats = new List<Models.BossStats>();
    public string rank { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Guild = _context.Guilds.Where(x => x.NameSlug == guildSlug && x.Region == region && x.RealmSlug == realm).FirstOrDefault();
        var raidProgRecord = _context.LeaderboardCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefault();

        if (raidProgRecord == null)
            await GetData();
        else
        {
            bossStats = ToBossStatsList(Helpers.CastleNathriaKillTime.GetKillTimes(raidProgRecord), bossNames);
            if (raidProgRecord.ExpirationDate < DateTime.Now)
                isOutdated = true;
        }

        var result = await _context.RankedCastleNathriaLeaderboard.Where(x => x.GuildName.Equals(Guild.Name)).FirstOrDefaultAsync();
        if (result != null)
            rank = result.Rank.ToString();

        isLoading = false;
        StateHasChanged();
    }

    public async Task Update()
    {
        var oldLeaderboards = await _context.LeaderboardCastleNathria.Where(x => x.GuildId == Guild.Id).FirstOrDefaultAsync();

        if (oldLeaderboards.Progress == 10)
        {
            Snackbar.Add($"Progression completed on {oldLeaderboards.Boss10KillTime.ToString()}", Severity.Normal);
            return;
        }

        _context.LeaderboardCastleNathria.Remove(oldLeaderboards);
        await _context.SaveChangesAsync();
        await GetData();
    }

    public async Task GetData()
    {
        estTimeLeft = 0;
        DateTime startTime = DateTime.Now;
        HttpClient client = new HttpClient();

        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);
        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");

        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.GuildRosterPOCO roster = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString);
        rosterMembers = roster.members.Where(x => x.character.level == 60).OrderBy(x => x.rank).ToArray();

        List<Models.POCO.CharacterAchievementPOCO.Achievement[]> allCharacters = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();

        int[] progressionTally = new int[10];
        int iterations = 0;
        int progression = 0;
        isLoading = true;
        foreach (Models.POCO.Member item in rosterMembers)
        {
            var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
            var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;

            Models.POCO.CharacterAchievementPOCO.CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<Models.POCO.CharacterAchievementPOCO.CharacterAchievement>(apiResponseString);
            Models.POCO.CharacterAchievementPOCO.Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

            if (validAchievements.Length > 0)
            {
                progressionTally[validAchievements.Length - 1]++;
                allCharacters.Add(validAchievements);
                iterations++;
                estTimeLeft += rosterMembers.Length / 15;
            }

            if (iterations >= 15)
            {
                for (int i = 9; i >= 0; i--)
                {
                    if (progressionTally[i] >= 15)
                    {
                        progression = i + 1;
                    }
                }
            }
            if (progression != 0)
            {
                List<Models.POCO.CharacterAchievementPOCO.Achievement[]> raidTeam = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();
                foreach (var character in allCharacters.Where(x => x.Length == progression))
                    raidTeam.Add(character);

                DateTime[] bossKills = GetBossTimes(raidTeam);

                bossStats = ToBossStatsList(bossKills, bossNames);
                // add this guilds progress to leaderboard
                Models.RaidingLeaderboards.LeaderboardCastleNathria newLeaderboards = new Models.RaidingLeaderboards.LeaderboardCastleNathria
                {
                    GuildId = Guild.Id,
                    Progress = progression,
                    ExpirationDate = DateTime.Now.AddMinutes(15),
                    Boss1KillTime = bossKills[0],
                    Boss2KillTime = bossKills[1],
                    Boss3KillTime = bossKills[2],
                    Boss4KillTime = bossKills[3],
                    Boss5KillTime = bossKills[4],
                    Boss6KillTime = bossKills[5],
                    Boss7KillTime = bossKills[6],
                    Boss8KillTime = bossKills[7],
                    Boss9KillTime = bossKills[8],
                    Boss10KillTime = bossKills[9],
                };

                _context.LeaderboardCastleNathria.Add(newLeaderboards);
                estTimeLeft = rosterMembers.Length;
                break;
            }

            StateHasChanged();
            TimeSpan RequestTime = DateTime.Now - startTime;
        }
        isLoading = false;
        _context.SaveChanges();

        StateHasChanged();
    }

    private DateTime[] GetBossTimes(List<Models.POCO.CharacterAchievementPOCO.Achievement[]> raidTeam)
    {
        DateTime[] bossKills = new DateTime[10];

        DateTime[] earliestKill = new DateTime[10];

        int j = 0;
        foreach (var member in raidTeam)
        {
            foreach (var achievement in member)
            {
                // conversion to human datetime
                string str = achievement.completed_timestamp.ToString();
                str = str.Substring(0, str.Length - 3);
                DateTime killTime = UnixTimeStampToDateTime(Convert.ToInt64(str)).ToUniversalTime();

                if(killTime < earliestKill[j] || earliestKill[j] == new DateTime())
                {
                    earliestKill[j] = killTime;
                    bossKills[j] = killTime;
                }

                j++;
            }
            j = 0;
        }

        return bossKills;
    }

    public static DateTime UnixTimeStampToDateTime(long unixTimeStamp)
    {
        // Unix timestamp is seconds past epoch
        DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dtDateTime;
    }

    private List<Models.BossStats> ToBossStatsList(DateTime[] bossKills, string[] bossNames)
    {
        List<Models.BossStats> stats = new List<Models.BossStats>();
        for(int i = 0; i < 10; i++)
        {
            stats.Add(new Models.BossStats
            {
                Name = bossNames[i],
                KillTime = bossKills[i]
            });
        }
        return stats;
    }

}