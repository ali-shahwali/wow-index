@page "/{region}/{realm}/{guildSlug}/"
@using WowIndex.CustomScrapers
@using System.Net.Http.Headers
@using System.Net
<MudContainer>

    @if (RequestTime.ToString() != "00:00:00")
    {
        <h1>@RequestTime.ToString()</h1>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }

    <MudText Class="my-6" Typo="Typo.h4">&lt; @Guild.Name &gt;</MudText>
    <MudGrid Class="mt-8">
        @foreach (var item in model)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@item.Name</MudText>
                        </CardHeaderContent>
                        @*<CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                            </CardHeaderActions>*@
                    </MudCardHeader>
                    <MudCardContent>
                        @if (item.Time.ToString() != "1/1/0001 12:00:00 AM")
                        {
                            <MudChip Size="Size.Small" Icon="@Icons.Material.Outlined.CheckCircleOutline" Color="Color.Success">Completed</MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small" Icon="@Icons.Material.Outlined.HighlightOff" Color="Color.Error">Incomplete</MudChip>
                        }
                        <MudText Class="mt-5" Typo="Typo.body2">@item.Description</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        @if (item.Time.ToString() != "1/1/0001 12:00:00 AM")
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Primary">@item.Time.ToString()</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public string region { get; set; }

    [Parameter]
    public string realm { get; set; }

    [Parameter]
    public string guildSlug { get; set; }

    public Models.Guild Guild = new Models.Guild();

    List<WowIndex.Models.RaidAchievement> model = new List<WowIndex.Models.RaidAchievement>();

    public TimeSpan RequestTime { get; set; }

    public string FullPage { get; set; }

    public List<string> items = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Guild = await _context.Guilds.Where(x => x.NameSlug == guildSlug && x.Region == region && x.RealmSlug == realm).FirstOrDefaultAsync();

        DateTime startTime = DateTime.Now;
        //var handler = new HttpClientHandler()
        //{
        //    AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
        //};

        HttpClient client = new HttpClient();
        //client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("gzip"));
        //client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue("deflate"));

        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");

        var accessToken = await Helpers.AuthTokenHelper.ValidateToken(_context);

        var response = await client.GetAsync($"data/wow/guild/{realm}/{guildSlug}/roster?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");

        string rosterString = await response.Content.ReadAsStringAsync();

        Models.POCO.GuildRosterPOCO roster = JsonConvert.DeserializeObject<Models.POCO.GuildRosterPOCO>(rosterString);
        Models.POCO.Member[] rosterMembers = roster.members.OrderBy(x => x.rank).ToArray();

        List<Models.POCO.CharacterAchievementPOCO.Achievement[]> allCharacters = new List<Models.POCO.CharacterAchievementPOCO.Achievement[]>();

        int[] progressionTally = new int[10];
        int progression = 0;
        foreach (Models.POCO.Member item in rosterMembers)
        {
            if (item.character.level == 60)
            {
                var apiResponse = await client.GetAsync($"profile/wow/character/{realm}/{item.character.name.ToLower()}/achievements?namespace=profile-{region}&locale=en_US&access_token={accessToken.token}");
                var apiResponseString = apiResponse.Content.ReadAsStringAsync().Result;

                Models.POCO.CharacterAchievementPOCO.CharacterAchievement characterAchievements = JsonConvert.DeserializeObject<Models.POCO.CharacterAchievementPOCO.CharacterAchievement>(apiResponseString);
                Models.POCO.CharacterAchievementPOCO.Achievement[] validAchievements = characterAchievements.achievements.Where(x => x.id >= 14356 && x.id <= 14365).ToArray();

                if (validAchievements.Length > 0)
                {
                    progressionTally[validAchievements.Length - 1]++;
                    allCharacters.Add(validAchievements);
                }
            }

            for (int i = 9; i >= 0; i--)
            {
                if (progressionTally[i] >= 15)
                {
                    progression = i + 1;
                }
            }

            if (progression != 0)
            {
                // get guild from db
                var guild = await _context.Guilds.Where(x => x.NameSlug == guildSlug).FirstOrDefaultAsync();

                // check if they're already in db leaderboard
                var leaderboardRecord = await _context.LeaderboardCastleNathria.Where(x => x.GuildId == guild.Id).FirstOrDefaultAsync();

                if (leaderboardRecord != null) // ALREADY ON LEADERBOAD
                {
                    //check if progress has increased
                    if (leaderboardRecord.Progress < progression)
                    {
                        // need to update with new progress
                        var entity = _context.LeaderboardCastleNathria.FirstOrDefault(x => x.GuildId == guild.Id);
                        entity.Progress = progression;
                        _context.SaveChanges();
                    }
                }
                else // NOT ON LEADERBOARD CURRENTLY
                {
                    // add this guilds progress to leaderboard
                    _context.LeaderboardCastleNathria.Add(new Models.RaidingLeaderboards.LeaderboardCastleNathria
                    {
                        GuildId = guild.Id,
                        Progress = progression,
                        RecordCreationDate = DateTime.Now
                    });

                    await _context.SaveChangesAsync();
                }

                break;
            }
        }

        RequestTime = DateTime.Now - startTime;

        StateHasChanged();
    }
}

