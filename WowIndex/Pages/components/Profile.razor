@page "/profile"

<MudContainer>
    @if (characters != null)
    {
        <MudGrid Class="mt-8">
            @foreach (var character in characters)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        @if (character.render_url != null)
                        {
                            <MudCardMedia Image="@character.render_url" Height="200" />
                        }
                        else
                        {
                            <MudCardMedia Image="" Height="200" />
                        }
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@character.CharacterName</MudText>
                        <MudText Typo="Typo.caption">@character.Realm</MudText>
                        <MudDivider Class="my-5" />
                        <MudText Typo="Typo.body2">@character.Faction.</MudText>
                        <MudText Typo="Typo.body2">temp</MudText>
                    </MudCardContent>
                        <MudCardActions>
                            @{
                                var realmSlug = character.Realm.Replace(" ", "-").ToLower();
                                string armoryLink = $"https://worldofwarcraft.com/en-gb/character/{character.Region}/{realmSlug}/{character.CharacterName.ToLower()}";
                            }


                            <a href="@armoryLink" target="_blank">link</a>
                            <MudButton Link="@armoryLink" Variant="Variant.Text" Color="Color.Primary">View in Armory</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    public WowIndex.Models.POCO.UserAccount.WoWUserProfilePOCO UserProfile { get; set; }

    public List<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO> CharacterMediaList { get; set; }

    private string clientId = "28750bf968ea4ae693014cdd27e5f912";
    private string clientSecret = "jYawcRjFNgX42AMDK6RGivUVa9I9swiH";

    public bool isExpired = false;

    public List<Models.UserProfile.Character> characters;
    // 1. Get code
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.Identity.Name;

        // get users chars from the database
        characters = await _context.Characters.Where(x => x.Email.Equals(email)).OrderByDescending(x => x.avatar_url).ToListAsync();

        if (characters[0].ExpirationDate < DateTime.Now)
            isExpired = true;
    }


    string GetQueryParm(string parmName, NavigationManager nav)
    {
        var uriBuilder = new UriBuilder(nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }
}
