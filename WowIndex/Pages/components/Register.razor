@page "/register/{region}"


@code {
    [Parameter]
    public string region { get; set; }

    public WowIndex.Models.POCO.UserAccount.WoWUserProfilePOCO UserProfile { get; set; }

    public List<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO> CharacterMediaList { get; set; }

    private string clientId = "1982e5a534d049c2be0c44fa9a4c3171";
    private string clientSecret = "6J4G57M927DI3z3adm5iI3hIvn185CbG";

    protected async override Task OnInitializedAsync()
    {
        // build request
        var client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.battle.net/oauth/token");

        // Get code from return url (provided by blizzard)
        //string grantType = "client_credentials";
        string grantType = "authorization_code";
        string code = GetQueryParm("code", NavigationManager);
        string redirectURI = $"https%3A%2F%2Flocalhost%3A44374%2Fregister%2F{region}";

        //client.DefaultRequestHeaders.Add("Content-Type", "multipart/form-data");
        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{clientId}:{clientSecret}")));

        // Send request
        var request = await client.PostAsync($"?grant_type={grantType}&code={code}&redirect_uri={redirectURI}&scope=wow.profile", null);

        string response = await request.Content.ReadAsStringAsync();

        // {"access_token":"EUbkChoUBbG8o4MtOg8FfDRcM5jQLaOuqk","token_type":"bearer","expires_in":86399}

        string AccessToken = response.Split('"')[3];

        await GetUserInfo(AccessToken);
    }

    // 3. Get account information
    private async Task GetUserInfo(string accessToken)
    {
        // build request
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

        // send request
        var auth = await client.GetAsync($"profile/user/wow?namespace=profile-{region}&locale=en_US&access_token={accessToken}");
        string userData = await auth.Content.ReadAsStringAsync();

        UserProfile = JsonConvert.DeserializeObject<WowIndex.Models.POCO.UserAccount.WoWUserProfilePOCO>(userData);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = authState.User.Identity.Name;
        CharacterMediaList = new List<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO>();

        string avatar_url = "", bust_url = "", render_url = "";
        foreach (var account in UserProfile.wow_accounts)
        {
            foreach (var character in account.characters)
            {
                var media = await client.GetAsync($"profile/wow/character/{character.realm.slug.ToLower()}/{character.name.ToLower()}/character-media?namespace=profile-{region.ToLower()}&locale=en_US&access_token={accessToken}");
                var mediaContent = await media.Content.ReadAsStringAsync();

                WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO wowCharacterMediaItem = JsonConvert.DeserializeObject<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO>(mediaContent);

                if(wowCharacterMediaItem != null)
                {
                    avatar_url = wowCharacterMediaItem.avatar_url;
                    bust_url = wowCharacterMediaItem.bust_url;
                    render_url = wowCharacterMediaItem.render_url;
                }
                _context.Characters.Add(new Models.UserProfile.Character
                {
                    CharacterName = character.name,
                    age = DateTime.Now,
                    Username = email,
                    Realm = character.realm.name,
                    Region = region,
                    Level = character.level,
                    Faction = character.faction.name,
                    Race = character.playable_race.name,
                    Gender = character.gender.name,
                    avatar_url = avatar_url,
                    bust_url = bust_url,
                    render_url = render_url
                });
                avatar_url = "";
                bust_url = "";
                render_url = "";
            }
        }

        await _context.SaveChangesAsync();
    }

    string GetQueryParm(string parmName, NavigationManager nav)
    {
        var uriBuilder = new UriBuilder(nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }
}
