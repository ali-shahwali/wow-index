@page "/authorize/{region}"


@code {
    /*
        This page authorizes a user registered on wowindex.io

        Retrieves all relevant information from blizzard
    */

    [Parameter]
    public string region { get; set; }

    public WowIndex.Models.POCO.UserAccount.WoWUserProfilePOCO UserProfile { get; set; }

    public List<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO> CharacterMediaList { get; set; }

    private bool hasProfile = false;

    protected async override Task OnInitializedAsync()
    {
        // get values from appsettings.json
        var clientId = Guid.Parse(Configuration["APIUserId"]);
        var clientSecret = Guid.Parse(Configuration["APIUserId"]);

        // check if authorization is for refresh purposes or setup purposes
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var checkProfile = await _context.Profiles.Where(x => x.AspEmail.Equals(authState.User.Identity.Name)).FirstOrDefaultAsync();
        if (checkProfile != null)
            hasProfile = true;

        // build request
        var client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.battle.net/oauth/token");

        // query parameters
        string grantType = "authorization_code";
        string code = GetQueryParam("code", NavigationManager);
        string redirectURI = $"https%3A%2F%2Flocalhost%3A44374%2Fauthorize%2F{region}";

        client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", Convert.ToBase64String(System.Text.ASCIIEncoding.ASCII.GetBytes($"{clientId}:{clientSecret}")));

        // Send request
        var request = await client.PostAsync($"?grant_type={grantType}&code={code}&redirect_uri={redirectURI}&scope=wow.profile", null);

        string response = await request.Content.ReadAsStringAsync();

        // oauth access token, 24 hour TTL
        string AccessToken = response.Split('"')[3];

        await GetUserInfo(AccessToken);
    }

    private async Task GetUserInfo(string accessToken)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string email = authState.User.Identity.Name;

        // setup connections for character data
        HttpClient client = new HttpClient();
        client.BaseAddress = new Uri($"https://{region}.api.blizzard.com/");
        var auth = await client.GetAsync($"profile/user/wow?namespace=profile-{region}&locale=en_US&access_token={accessToken}");
        string userData = await auth.Content.ReadAsStringAsync();

        // create profile for user on profile setup
        if (!hasProfile)
        {
            HttpClient btagClient = new HttpClient();
            btagClient.BaseAddress = new Uri($"https://{region}.battle.net/oauth/userinfo");
            var btagAuth = await btagClient.GetAsync($"?access_token={accessToken}");
            string btagResponse = await btagAuth.Content.ReadAsStringAsync();

            Models.UserProfile.Profile profile = new Models.UserProfile.Profile()
            {
                AspEmail = email,
                ProfileUri = "https://i.imgur.com/t6xqQoy.jpg",
                BattleTag = btagResponse.Split('"')[9]
            };
            _context.Profiles.Add(profile);
        }

        UserProfile = JsonConvert.DeserializeObject<WowIndex.Models.POCO.UserAccount.WoWUserProfilePOCO>(userData);

        // null prevention
        string avatar_url = "", bust_url = "", render_url = "";
        if (UserProfile != null)
        {
            foreach (var account in UserProfile.wow_accounts)
            {
                foreach (var character in account.characters)
                {
                    var media = await client.GetAsync($"profile/wow/character/{character.realm.slug.ToLower()}/{character.name.ToLower()}/character-media?namespace=profile-{region.ToLower()}&locale=en_US&access_token={accessToken}");
                    string mediaContent = await media.Content.ReadAsStringAsync();

                    WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO wowCharacterMediaItem = JsonConvert.DeserializeObject<WowIndex.Models.POCO.characterMedia.WowCharacterMediaPOCO>(mediaContent);

                    if (wowCharacterMediaItem != null)
                    {
                        avatar_url = wowCharacterMediaItem.avatar_url;
                        bust_url = wowCharacterMediaItem.bust_url;
                        render_url = wowCharacterMediaItem.render_url;
                    }
                    Models.UserProfile.Character c = new Models.UserProfile.Character
                    {
                        CharacterName = character.name,
                        ExpirationDate = DateTime.Now.AddMinutes(1),
                        Email = email,
                        Realm = character.realm.name,
                        Region = region,
                        Level = character.level,
                        Faction = character.faction.name,
                        Race = character.playable_race.name,
                        Gender = character.gender.name,
                        avatar_url = avatar_url,
                        bust_url = bust_url,
                        render_url = render_url
                    };

                    // updates old character or adds new character if needed
                    var oldCharacter = _context.Characters.Where(x => c.CharacterName.Equals(x.CharacterName)).FirstOrDefault();
                    if (hasProfile && oldCharacter != null)
                    {
                        _context.Remove(oldCharacter);
                        _context.SaveChanges();
                    }

                    _context.Characters.Add(c);
                    avatar_url = "";
                    bust_url = "";
                    render_url = "";
                }
            }

            await _context.SaveChangesAsync();

            NavigationManager.NavigateTo("/profile");
        }
    }

    string GetQueryParam(string parmName, NavigationManager nav)
    {
        var uriBuilder = new UriBuilder(nav.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }
}
